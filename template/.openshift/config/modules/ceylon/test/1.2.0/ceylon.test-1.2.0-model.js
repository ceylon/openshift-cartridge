(function(define) { define(function(require, ex$, module) {
ex$.$CCMM$={"ceylon.test.core":{DefaultLoggingListener:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{pk:"ceylon.test",nm:"TestListener"}],ps:[{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"line"}]],def:1,mt:"prm",$pt:"f",an:{doc:["A function that log the given line."]},nm:"write"}],mt:"c",$m:{writeBannerResults:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{pk:"ceylon.test",nm:"TestRunResult"},mt:"prm",nm:"result"}]],$ff:1,mt:"m",nm:"writeBannerResults"},writeSummary:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{pk:"ceylon.test",nm:"TestRunResult"},mt:"prm",nm:"result"}]],$ff:1,mt:"m",nm:"writeSummary"},testRunFinish:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestRunFinishEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"testRunFinish"},testRunStart:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestRunStartEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"testRunStart"},banner:{$t:{md:"$",pk:"$",nm:"String"},pa:9,ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"title"}]],mt:"m",nm:"banner"},testFinish:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestFinishEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"testFinish"},writeBannerSuccess:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{pk:"ceylon.test",nm:"TestRunResult"},mt:"prm",nm:"result"}]],$ff:1,mt:"m",nm:"writeBannerSuccess"},testStart:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestStartEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"testStart"},testError:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestErrorEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"testError"},writeFailures:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{pk:"ceylon.test",nm:"TestRunResult"},mt:"prm",nm:"result"}]],$ff:1,mt:"m",nm:"writeFailures"},writeBannerFailed:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{pk:"ceylon.test",nm:"TestRunResult"},mt:"prm",nm:"result"}]],$ff:1,mt:"m",nm:"writeBannerFailed"},write$77nnww:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"line"}]],$ff:1,mt:"m",an:{doc:["A function that log the given line."]},nm:"write"},writeBannerStart:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,$ff:1,mt:"m",nm:"writeBannerStart"}},an:{doc:["A [[TestListener]] which prints information about test execution."]},nm:"DefaultLoggingListener"},createExecutors:{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestExecutor"}],nm:"Sequential"},ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestSource"}],nm:"Sequential"},mt:"prm",nm:"sources"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Boolean"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{pk:"ceylon.test",nm:"TestExecutor"},{pk:".",nm:"Nothing"}]},{mt:"tp",pk:"ceylon.test",nm:"TestExecutor"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},mt:"prm",nm:"filter"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Comparison"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{pk:"ceylon.test",nm:"TestExecutor"},{comp:"u",l:[{pk:"ceylon.test",nm:"TestExecutor"},{pk:".",nm:"Nothing"}]}]},{mt:"tp",pk:"ceylon.test",nm:"TestExecutor"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{pk:"ceylon.test",nm:"TestExecutor"},{pk:".",nm:"Nothing"}]},{mt:"tp",pk:"ceylon.test",nm:"TestExecutor"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Tuple"}],nm:"Callable"},mt:"prm",nm:"comparator"}]],mt:"m",nm:"createExecutors"},runningRunners:{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",pk:".",nm:"DefaultTestRunner"}],nm:"IdentitySet"},mt:"a",nm:"runningRunners"},findCandidatesInFullQualifiedName:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",pk:".",nm:"TestCandidate"}],nm:"ArrayList"},mt:"prm",nm:"candidates"},{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"fqn"}]],mt:"m",nm:"findCandidatesInFullQualifiedName"},findAnnotations:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"A"}],nm:"Sequential"},ps:[[{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"},mt:"prm",nm:"classDecl"}]],mt:"m",tp:[{dv:"out",sts:[{md:"$",pk:"$",nm:"Annotation"}],nm:"A"}],nm:"findAnnotations"},callbackCache:{super:{md:"$",pk:"$",nm:"Basic"},mt:"o",$at:{cache$fv2nil:{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",md:"$",pk:"$",nm:"String"},{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"}],nm:"Sequential"}],nm:"HashMap"},mt:"a",nm:"cache"}},$m:{get:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"}],nm:"Sequential"},pa:1,ps:[[{$t:{comp:"u",l:[{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"Package"}]},mt:"prm",nm:"declaration"},{$t:{md:"$",pk:"ceylon.language.meta.model",tp:[{mt:"tp",nm:"CallbackType"}],nm:"Type"},mt:"prm",nm:"callbackType"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Annotation"}],nm:"CallbackType"}],nm:"get"}},nm:"callbackCache"},IgnoreException:{super:{md:"$",pk:"$",nm:"Exception"},pa:1,ps:[{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"prm",an:{doc:["Reason why the test is ignored."]},nm:"reason",$hdn:1}],mt:"c",$at:{reason:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"a",an:{doc:["Reason why the test is ignored."]},nm:"reason"}},an:{doc:["Thrown when test is ignored."]},nm:"IgnoreException"},findCandidatesInClass:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",pk:".",nm:"TestCandidate"}],nm:"ArrayList"},mt:"prm",nm:"candidates"},{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"},mt:"prm",nm:"classDecl"}]],$ff:1,mt:"m",nm:"findCandidatesInClass"},findCandidatesInFunction:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",pk:".",nm:"TestCandidate"}],nm:"ArrayList"},mt:"prm",nm:"candidates"},{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"},mt:"prm",nm:"funcDecl"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"}]},def:1,mt:"prm",nm:"classDecl"}]],$ff:1,mt:"m",nm:"findCandidatesInFunction"},findCandidates:{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:".",nm:"TestCandidate"}],nm:"Sequential"},ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestSource"}],nm:"Sequential"},mt:"prm",nm:"sources"}]],mt:"m",nm:"findCandidates"},MultipleFailureException:{super:{md:"$",pk:"$",nm:"Exception"},pa:1,ps:[{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Throwable"}],nm:"Sequential"},pa:1,mt:"prm",an:{doc:["The collected exceptions."]},nm:"exceptions",$hdn:1}],mt:"c",$at:{message:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",nm:"message"},exceptions:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Throwable"}],nm:"Sequential"},pa:1,mt:"a",an:{doc:["The collected exceptions."]},nm:"exceptions"}},an:{doc:["Thrown when multiple exceptions occurs."]},nm:"MultipleFailureException"},findCandidatesInModule:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",pk:".",nm:"TestCandidate"}],nm:"ArrayList"},mt:"prm",nm:"candidates"},{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"Module"},mt:"prm",nm:"mod"}]],$ff:1,mt:"m",nm:"findCandidatesInModule"},DefaultTestRunner:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{pk:"ceylon.test",nm:"TestRunner"}],ps:[{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestSource"}],nm:"Sequential"},mt:"prm",nm:"sources"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestListener"}],nm:"Sequential"},mt:"prm",nm:"listeners"},{$t:{pk:"ceylon.test",nm:"TestFilter"},mt:"prm",nm:"filter"},{$t:{pk:"ceylon.test",nm:"TestComparator"},mt:"prm",nm:"comparator"}],mt:"c",$at:{filter$e3f7l2:{$t:{pk:"ceylon.test",nm:"TestFilter"},mt:"a",nm:"filter"},listeners$twt4on:{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestListener"}],nm:"Sequential"},mt:"a",nm:"listeners"},sources$u3gr8m:{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestSource"}],nm:"Sequential"},mt:"a",nm:"sources"},description:{$t:{pk:"ceylon.test",nm:"TestDescription"},pa:3,mt:"g",nm:"description"},executors$l7lcma:{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestExecutor"}],nm:"Sequential"},mt:"a",nm:"executors"},comparator$dx3x4o:{$t:{pk:"ceylon.test",nm:"TestComparator"},mt:"a",nm:"comparator"}},$m:{compareExecutors$cd8z5n:{$t:{md:"$",pk:"$",nm:"Comparison"},ps:[[{$t:{pk:"ceylon.test",nm:"TestExecutor"},mt:"prm",nm:"e1"},{$t:{pk:"ceylon.test",nm:"TestExecutor"},mt:"prm",nm:"e2"}]],mt:"m",nm:"compareExecutors"},verifyCycle$b1uc1l:{$t:{md:"$",pk:"$",nm:"Anything"},$ff:1,mt:"m",nm:"verifyCycle"},filterExecutor$nptbf:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{pk:"ceylon.test",nm:"TestExecutor"},mt:"prm",nm:"e"}]],mt:"m",nm:"filterExecutor"},initExecutors$ynov3m:{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestExecutor"}],nm:"Sequential"},mt:"m",nm:"initExecutors"},run:{$t:{pk:"ceylon.test",nm:"TestRunResult"},pa:3,mt:"m",nm:"run"}},an:{doc:["Default implementation of [[TestRunner]]."]},nm:"DefaultTestRunner"},findAnnotation:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"A"}]},ps:[[{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"},mt:"prm",nm:"funcDecl"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"}]},mt:"prm",nm:"classDecl"}]],mt:"m",tp:[{dv:"out",sts:[{md:"$",pk:"$",nm:"Annotation"}],nm:"A"}],nm:"findAnnotation"},"$pkg-pa":1,DefaultTestExecutor:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{pk:"ceylon.test",nm:"TestExecutor"}],ps:[{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"},mt:"prm",nm:"functionDeclaration"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"}]},mt:"prm",nm:"classDeclaration"}],mt:"c",$at:{classDeclaration$brvm6p:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"}]},mt:"a",nm:"classDeclaration"},description:{$t:{pk:"ceylon.test",nm:"TestDescription"},pa:11,mt:"g",nm:"description"},functionDeclaration$wv1xn3:{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"},mt:"a",nm:"functionDeclaration"}},$m:{getName:{$t:{md:"$",pk:"$",nm:"String"},pa:9,mt:"m",nm:"getName"},handleAfterCallbacks:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{pk:"ceylon.test",nm:"TestRunContext"},mt:"prm",nm:"context"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"instance"},{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",$pt:"f",nm:"execute"}],[]],$ff:1,mt:"m",$m:{execute$evhxt:{$t:{md:"$",pk:"$",nm:"Anything"},$ff:1,mt:"m",nm:"execute"}},nm:"handleAfterCallbacks"},handleTestInvocation:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{pk:"ceylon.test",nm:"TestRunContext"},mt:"prm",nm:"context"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"instance"}],[]],$ff:1,mt:"m",nm:"handleTestInvocation"},verifyFunctionReturnType:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,$ff:1,mt:"m",nm:"verifyFunctionReturnType"},verifyClassAttributes:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"},mt:"prm",nm:"classDeclaration"}]],$ff:1,mt:"m",nm:"verifyClassAttributes"},verifyClassTypeParameters:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"},mt:"prm",nm:"classDeclaration"}]],$ff:1,mt:"m",nm:"verifyClassTypeParameters"},handleIgnored:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:9,ps:[[{$t:{pk:"ceylon.test",nm:"TestRunContext"},mt:"prm",nm:"context"}]],mt:"m",nm:"handleIgnored"},execute:{$t:{md:"$",pk:"$",nm:"Anything"},pa:11,ps:[[{$t:{pk:"ceylon.test",nm:"TestRunContext"},mt:"prm",nm:"context"}]],$ff:1,mt:"m",nm:"execute"},verifyFunctionParameters:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,$ff:1,mt:"m",nm:"verifyFunctionParameters"},verifyClassParameters:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"},mt:"prm",nm:"classDeclaration"}]],$ff:1,mt:"m",nm:"verifyClassParameters"},handleBeforeCallbacks:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{pk:"ceylon.test",nm:"TestRunContext"},mt:"prm",nm:"context"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"instance"},{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",$pt:"f",nm:"execute"}],[]],$ff:1,mt:"m",$m:{execute$c9udks:{$t:{md:"$",pk:"$",nm:"Anything"},$ff:1,mt:"m",nm:"execute"}},nm:"handleBeforeCallbacks"},verifyFunctionTypeParameters:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,$ff:1,mt:"m",nm:"verifyFunctionTypeParameters"},handleTestExecution:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{pk:"ceylon.test",nm:"TestRunContext"},mt:"prm",nm:"context"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"instance"},{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",$pt:"f",nm:"execute"}],[]],$ff:1,mt:"m",$m:{execute$ea8503:{$t:{md:"$",pk:"$",nm:"Anything"},$ff:1,mt:"m",nm:"execute"}},nm:"handleTestExecution"},verify:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:9,ps:[[{$t:{pk:"ceylon.test",nm:"TestRunContext"},mt:"prm",nm:"context"}]],mt:"m",an:{doc:["Verifies that the test context does not contain any errors.\n\nReturns true if the context is ok, false if any errors were fired."]},nm:"verify"},verifyCallback:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"},mt:"prm",nm:"callbackDeclaration"},{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"callbackName"}]],$ff:1,mt:"m",nm:"verifyCallback"},verifyFunctionAnnotations:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,$ff:1,mt:"m",nm:"verifyFunctionAnnotations"},getInstance:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Object"}]},pa:9,mt:"m",nm:"getInstance"},invokeFunction$vvhr5f:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"},mt:"prm",nm:"f"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"instance"}]],$ff:1,mt:"m",nm:"invokeFunction"},verifyBeforeCallbacks:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,$ff:1,mt:"m",nm:"verifyBeforeCallbacks"},verifyAfterCallbacks:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,$ff:1,mt:"m",nm:"verifyAfterCallbacks"},findCallbacks$o26xm2:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"}],nm:"Sequential"},mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Annotation"}],nm:"CallbackType"}],nm:"findCallbacks"}},an:{doc:["Default implementation of [[TestExecutor]]."]},nm:"DefaultTestExecutor"},TestCandidate:{$alias:{comp:"u",l:[{pk:"$",l:[{md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"},{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"}]}],nm:"Tuple"},{pk:"ceylon.test.internal",nm:"ErrorTestExecutor"}]},mt:"als",nm:"TestCandidate"},findCandidatesInModuleLiteral:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",pk:".",nm:"TestCandidate"}],nm:"ArrayList"},mt:"prm",nm:"candidates"},{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"modName"}]],mt:"m",nm:"findCandidatesInModuleLiteral"},createExecutor:{$t:{pk:"ceylon.test",nm:"TestExecutor"},ps:[[{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"},mt:"prm",nm:"funcDecl"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"}]},mt:"prm",nm:"classDecl"}]],mt:"m",nm:"createExecutor"},findCandidatesInClassLiteral:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",pk:".",nm:"TestCandidate"}],nm:"ArrayList"},mt:"prm",nm:"candidates"},{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"fqn"}]],mt:"m",nm:"findCandidatesInClassLiteral"},findCandidatesInFunctionLiteral:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",pk:".",nm:"TestCandidate"}],nm:"ArrayList"},mt:"prm",nm:"candidates"},{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"fqn"}]],mt:"m",nm:"findCandidatesInFunctionLiteral"},findPackage:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"Package"}]},ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"pkgName"}]],mt:"m",nm:"findPackage"},doFindCallbacks:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"}],nm:"Sequential"},ps:[[{$t:{comp:"u",l:[{md:"$",pk:"ceylon.language.meta.declaration",nm:"Package"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassOrInterfaceDeclaration"}]},mt:"prm",nm:"declaration"},{$t:{md:"$",pk:"ceylon.language.meta.model",tp:[{mt:"tp",nm:"CallbackType"}],nm:"Type"},mt:"prm",nm:"type"}]],mt:"m",$m:{visit$ejgra7:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassOrInterfaceDeclaration"},mt:"prm",nm:"decl"},{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassOrInterfaceDeclaration"},mt:"prm",nm:"decl"}]],mt:"prm",$pt:"f",nm:"do"}]],$ff:1,mt:"m",$m:{do$x62utt:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassOrInterfaceDeclaration"},mt:"prm",nm:"decl"}]],$ff:1,mt:"m",nm:"do"}},nm:"visit"}},tp:[{sts:[{md:"$",pk:"$",nm:"Annotation"}],nm:"CallbackType"}],nm:"doFindCallbacks"},findCandidatesInTypeLiteral:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",pk:".",nm:"TestCandidate"}],nm:"ArrayList"},mt:"prm",nm:"candidates"},{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"typeLiteral"}]],$ff:1,mt:"m",nm:"findCandidatesInTypeLiteral"},findCandidatesInPackageLiteral:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",pk:".",nm:"TestCandidate"}],nm:"ArrayList"},mt:"prm",nm:"candidates"},{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"pkgName"}]],mt:"m",nm:"findCandidatesInPackageLiteral"},findCandidatesInPackage:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",pk:".",nm:"TestCandidate"}],nm:"ArrayList"},mt:"prm",nm:"candidates"},{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"Package"},mt:"prm",nm:"pkg"}]],$ff:1,mt:"m",nm:"findCandidatesInPackage"},"$pkg-anns":{doc:["Contains core implementations of the test module."]},createSuiteExecutor:{$t:{pk:"ceylon.test",nm:"TestExecutor"},ps:[[{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"},mt:"prm",nm:"funcDecl"},{$t:{pk:"ceylon.test",nm:"TestSuiteAnnotation"},mt:"prm",nm:"suiteAnnotation"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Boolean"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{pk:"ceylon.test",nm:"TestExecutor"},{pk:".",nm:"Nothing"}]},{mt:"tp",pk:"ceylon.test",nm:"TestExecutor"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},mt:"prm",nm:"filter"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Comparison"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{pk:"ceylon.test",nm:"TestExecutor"},{comp:"u",l:[{pk:"ceylon.test",nm:"TestExecutor"},{pk:".",nm:"Nothing"}]}]},{mt:"tp",pk:"ceylon.test",nm:"TestExecutor"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{pk:"ceylon.test",nm:"TestExecutor"},{pk:".",nm:"Nothing"}]},{mt:"tp",pk:"ceylon.test",nm:"TestExecutor"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Tuple"}],nm:"Callable"},mt:"prm",nm:"comparator"}]],mt:"m",nm:"createSuiteExecutor"}},"$mod-version":"1.2.0","$mod-deps":["ceylon.language\/1.2.0","ceylon.collection\/1.2.0"],"ceylon.test":{TestExecutor:{pa:1,mt:"i",$at:{description:{$t:{pk:".",nm:"TestDescription"},pa:5,mt:"a",an:{doc:["The description of the test to be run."]},nm:"description"}},$m:{execute:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{pk:".",nm:"TestRunContext"},mt:"prm",an:{doc:["The context of this test."]},nm:"context"}]],$ff:1,mt:"m",an:{doc:["Run the test."]},nm:"execute"}},an:{doc:["Represent a strategy how to run test.\nDuring test execution notifies test mechanism about significant events via given [[TestRunContext]].\n\nCustom implementation can be specify via [[testExecutor]] annotation. It should accept two parameters:\n\n   - the first parameter is own test function, \n     represented like [[FunctionDeclaration|ceylon.language.meta.declaration::FunctionDeclaration]]\n   - the second parameter is class containg this test function, if exists, \n     represented like [[ClassDeclaration?|ceylon.language.meta.declaration::ClassDeclaration]]\n"]},nm:"TestExecutor"},TestSuiteAnnotation:{super:{md:"$",pk:"$",nm:"Basic"},pa:545,sts:[{md:"$",pk:"$",tp:[{mt:"tp",pk:".",nm:"TestSuiteAnnotation"},{mt:"tp",md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"},{mt:"tp",md:"$",pk:"$",nm:"Anything"}],nm:"OptionalAnnotation"}],ps:[{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"ceylon.language.meta.declaration",nm:"Declaration"},{mt:"tp",pk:".",nm:"Nothing"}],nm:"Iterable"},pa:1,mt:"prm",an:{doc:["The program elements from which tests will be executed."]},nm:"sources"}],mt:"c",$at:{sources:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"ceylon.language.meta.declaration",nm:"Declaration"},{mt:"tp",pk:".",nm:"Nothing"}],nm:"Iterable"},pa:1,mt:"a",an:{doc:["The program elements from which tests will be executed."]},nm:"sources"}},an:{doc:["Annotation class for [[testSuite]]"]},nm:"TestSuiteAnnotation"},TestExecutorAnnotation:{super:{md:"$",pk:"$",nm:"Basic"},pa:545,sts:[{md:"$",pk:"$",tp:[{mt:"tp",pk:".",nm:"TestExecutorAnnotation"},{comp:"u",mt:"tp",l:[{md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"Package"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"Module"}]},{mt:"tp",md:"$",pk:"$",nm:"Anything"}],nm:"OptionalAnnotation"}],ps:[{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"},pa:1,mt:"prm",an:{doc:["The class declaration of [[TestExecutor]]."]},nm:"executor"}],mt:"c",$at:{executor:{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"},pa:1,mt:"a",an:{doc:["The class declaration of [[TestExecutor]]."]},nm:"executor"}},an:{doc:["Annotation class for [[testExecutor]]."]},nm:"TestExecutorAnnotation"},assertThatException:{$t:{pk:".",nm:"ExceptionAssert"},pa:1,ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Throwable"},{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Anything"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Callable"}]},mt:"prm",an:{doc:["The checked exception or callback which should throw exception."]},nm:"exceptionSource"}]],mt:"m",an:{doc:["Fails the test if expected exception isn't thrown."],throws:["AssertionError","When _exceptionSource()_ doesn't throw an Exception"]},nm:"assertThatException"},nullSafeString:{$t:{md:"$",pk:"$",nm:"String"},ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",nm:"obj"}]],mt:"m",nm:"nullSafeString"},testSuite:{$t:{pk:".",nm:"TestSuiteAnnotation"},pa:513,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"ceylon.language.meta.declaration",nm:"Declaration"},{mt:"tp",pk:".",nm:"Nothing"}],nm:"Iterable"},mt:"prm",an:{doc:["The program elements from which tests will be executed."]},nm:"sources"}]],mt:"m",an:{doc:["Annotation to specify test suite, which allow combine several tests or test suites and run them together.\n\n    testSuite({`class YodaTest`,\n               `class DarthVaderTest`,\n               `function starOfDeathTestSuite`})\n    shared void starwarsTestSuite() {}"]},nm:"testSuite"},TestAnnotation:{super:{md:"$",pk:"$",nm:"Basic"},pa:545,sts:[{md:"$",pk:"$",tp:[{mt:"tp",pk:".",nm:"TestAnnotation"},{mt:"tp",md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"},{mt:"tp",md:"$",pk:"$",nm:"Anything"}],nm:"OptionalAnnotation"}],mt:"c",an:{doc:["Annotation class for [[test]]."]},nm:"TestAnnotation"},assertFalse:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",an:{doc:["The condition to be checked."]},nm:"condition"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},def:1,mt:"prm",an:{doc:["The message describing the problem."]},nm:"message"}]],$ff:1,mt:"m",an:{doc:["Fails the test if the _condition_ is true."],throws:["AssertionError","When _condition_ is true."]},nm:"assertFalse"},TestFilter:{pa:1,$alias:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Boolean"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{pk:".",nm:"TestDescription"},{pk:".",nm:"Nothing"}]},{mt:"tp",pk:".",nm:"TestDescription"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},mt:"als",an:{doc:["Alias for functions which filter tests. \nShould return true if the given test should be run."]},nm:"TestFilter"},testListeners:{$t:{pk:".",nm:"TestListenersAnnotation"},pa:513,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"},{mt:"tp",pk:".",nm:"Nothing"}],nm:"Iterable"},mt:"prm",an:{doc:["The class declarations of [[TestListener]]s"]},nm:"listeners"}]],mt:"m",an:{doc:["Annotation to specify custom [[TestListener]]s, which will be used during running test.\n\nIt can be set on several places: on concrete test, on class which contains tests, on whole package or even module.\nIf multiple occurrences will be found, all listeners will be used.\n\n    testListeners({`class DependencyInjectionTestListener`,\n                   `class TransactionalTestListener`})\n    package com.acme;"]},nm:"testListeners"},error:{super:{pk:".",nm:"TestState"},pa:1,mt:"o",an:{doc:["A test state is _error_, if it propagates any exception which is not an [[AssertionError]]."]},nm:"error"},afterTest:{$t:{pk:".",nm:"AfterTestAnnotation"},pa:513,mt:"m",an:{doc:["Marks a function which will be run after each test in its scope.\n\nIt allow to place common initialization logic into separate place.\nOnly nullary functions should be annotated with `afterTest`.\n\n    class StarshipTest() {\n\n        beforeTest \n        void init() => starship.chargePhasers();\n\n        afterTest \n        void dispose() => starship.shutdownSystems();\n"]},nm:"afterTest"},TestState:{super:{md:"$",pk:"$",nm:"Basic"},pa:257,ps:[{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"prm",nm:"string"}],mt:"c",of:[{pk:".",nm:"success"},{pk:".",nm:"failure"},{pk:".",nm:"error"},{pk:".",nm:"ignored"}],$at:{string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"a",nm:"string"}},an:{doc:["The result state of test execution."]},nm:"TestState"},TestRunContext:{pa:1,mt:"i",$at:{result:{$t:{pk:".",nm:"TestRunResult"},pa:5,mt:"a",an:{doc:["The summary result of the test run."]},nm:"result"},runner:{$t:{pk:".",nm:"TestRunner"},pa:5,mt:"a",an:{doc:["The current test runner."]},nm:"runner"}},$m:{fireTestRunStart:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestRunStartEvent"},mt:"prm",an:{doc:["The event object."]},nm:"event"}]],$ff:1,mt:"m",an:{doc:["Fire [[TestListener.testRunStart]] event."]},nm:"fireTestRunStart"},fireTestExclude:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestExcludeEvent"},mt:"prm",an:{doc:["The event object."]},nm:"event"}]],$ff:1,mt:"m",an:{doc:["Fire [[TestListener.testExclude]] event."]},nm:"fireTestExclude"},addTestListener:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:".",nm:"TestListener"}],nm:"Sequential"},mt:"prm",an:{doc:["The listeners for adding."]},seq:1,nm:"listeners"}]],$ff:1,mt:"m",an:{doc:["Add given listeners into test context."]},nm:"addTestListener"},fireTestRunFinish:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestRunFinishEvent"},mt:"prm",an:{doc:["The event object."]},nm:"event"}]],$ff:1,mt:"m",an:{doc:["Fire [[TestListener.testRunFinish]] event."]},nm:"fireTestRunFinish"},removeTestListener:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:".",nm:"TestListener"}],nm:"Sequential"},mt:"prm",an:{doc:["The listeners for removing."]},seq:1,nm:"listeners"}]],$ff:1,mt:"m",an:{doc:["Remove given listeners into test context."]},nm:"removeTestListener"},fireTestFinish:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestFinishEvent"},mt:"prm",an:{doc:["The event object."]},nm:"event"}]],$ff:1,mt:"m",an:{doc:["Fire [[TestListener.testFinish]] event."]},nm:"fireTestFinish"},fireTestStart:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestStartEvent"},mt:"prm",an:{doc:["The event object."]},nm:"event"}]],$ff:1,mt:"m",an:{doc:["Fire [[TestListener.testStart]] event."]},nm:"fireTestStart"},fireTestError:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestErrorEvent"},mt:"prm",an:{doc:["The event object."]},nm:"event"}]],$ff:1,mt:"m",an:{doc:["Fire [[TestListener.testError]] event."]},nm:"fireTestError"},fireTestIgnore:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestIgnoreEvent"},mt:"prm",an:{doc:["The event object."]},nm:"event"}]],$ff:1,mt:"m",an:{doc:["Fire [[TestListener.testIgnore]] event."]},nm:"fireTestIgnore"}},an:{doc:["Represents a context in which a test is executed, it's used by [[TestExecutor]]s."]},nm:"TestRunContext"},TestListenersAnnotation:{super:{md:"$",pk:"$",nm:"Basic"},pa:545,sts:[{md:"$",pk:"$",tp:[{mt:"tp",pk:".",nm:"TestListenersAnnotation"},{comp:"u",mt:"tp",l:[{md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"Package"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"Module"}]},{mt:"tp",md:"$",pk:"$",nm:"Anything"}],nm:"OptionalAnnotation"}],ps:[{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"},{mt:"tp",pk:".",nm:"Nothing"}],nm:"Iterable"},pa:1,mt:"prm",an:{doc:["The class declarations of [[TestListener]]s"]},nm:"listeners"}],mt:"c",$at:{listeners:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"},{mt:"tp",pk:".",nm:"Nothing"}],nm:"Iterable"},pa:1,mt:"a",an:{doc:["The class declarations of [[TestListener]]s"]},nm:"listeners"}},an:{doc:["Annotation class for [[testListeners]]."]},nm:"TestListenersAnnotation"},TestDescription:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,ps:[{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"prm",an:{doc:["The user friendly name of this test."]},nm:"name",$hdn:1},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"}]},pa:1,def:1,mt:"prm",an:{doc:["The function declaration of this test, if one exists."]},nm:"functionDeclaration",$hdn:1},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"}]},pa:1,def:1,mt:"prm",an:{doc:["The class declaration, which is container of this test, if one exists."]},nm:"classDeclaration",$hdn:1},{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:".",nm:"TestDescription"}],nm:"Sequential"},pa:1,def:1,mt:"prm",an:{doc:["The children of this test, if any."]},nm:"children",$hdn:1}],mt:"c",$at:{string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",nm:"string"},children:{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:".",nm:"TestDescription"}],nm:"Sequential"},pa:1,mt:"a",an:{doc:["The children of this test, if any."]},nm:"children"},name:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"a",an:{doc:["The user friendly name of this test."]},nm:"name"},functionDeclaration:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"}]},pa:1,mt:"a",an:{doc:["The function declaration of this test, if one exists."]},nm:"functionDeclaration"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},classDeclaration:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"}]},pa:1,mt:"a",an:{doc:["The class declaration, which is container of this test, if one exists."]},nm:"classDeclaration"}},$m:{equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],mt:"m",nm:"equals"}},an:{doc:["Describes a test, or a group of tests, can be arranged in a tree."]},nm:"TestDescription"},defaultTestComparator:{$t:{md:"$",pk:"$",nm:"Comparison"},pa:1,ps:[[{$t:{pk:".",nm:"TestDescription"},mt:"prm",nm:"description1"},{$t:{pk:".",nm:"TestDescription"},mt:"prm",nm:"description2"}]],mt:"m",an:{doc:["Default test comparator sort tests alphabetically."]},nm:"defaultTestComparator"},assertTrue:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",an:{doc:["The condition to be checked."]},nm:"condition"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},def:1,mt:"prm",an:{doc:["The message describing the problem."]},nm:"message"}]],$ff:1,mt:"m",an:{doc:["Fails the test if the _condition_ is false."],throws:["AssertionError","When _condition_ is false."]},nm:"assertTrue"},assertNotNull:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",an:{doc:["The value to be checked."]},nm:"val"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},def:1,mt:"prm",an:{doc:["The message describing the problem."]},nm:"message"}]],$ff:1,mt:"m",an:{doc:["Fails the test if the given _value_ is null."],throws:["AssertionError","When _val_ is null."]},nm:"assertNotNull"},AfterTestAnnotation:{super:{md:"$",pk:"$",nm:"Basic"},pa:545,sts:[{md:"$",pk:"$",tp:[{mt:"tp",pk:".",nm:"AfterTestAnnotation"},{mt:"tp",md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"},{mt:"tp",md:"$",pk:"$",nm:"Anything"}],nm:"OptionalAnnotation"}],mt:"c",an:{doc:["Annotation class for [[afterTest]]."]},nm:"AfterTestAnnotation"},beforeTest:{$t:{pk:".",nm:"BeforeTestAnnotation"},pa:513,mt:"m",an:{doc:["Marks a function which will be run before each test in its scope.\n\nIt allow to place common initialization logic into separate place.\nOnly nullary functions should be annotated with `beforeTest`.\n\n    class StarshipTest() {\n\n        beforeTest \n        void init() => starship.chargePhasers();\n\n        afterTest \n        void dispose() => starship.shutdownSystems();"]},nm:"beforeTest"},ignore:{$t:{pk:".",nm:"IgnoreAnnotation"},pa:513,ps:[[{$t:{md:"$",pk:"$",nm:"String"},def:1,mt:"prm",an:{doc:["Reason why the test is ignored."]},nm:"reason"}]],mt:"m",an:{doc:["Marks a test or group of tests which should not be executed.\n\nIt can be set on several places: on concrete test, on class which contains tests, on whole package or even module.\n\n    test\n    ignore(\"still not implemented\")\n    void shouldBeFasterThanLight() {\n"]},nm:"ignore"},defaultTestFilter:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,ps:[[{$t:{pk:".",nm:"TestDescription"},mt:"prm",nm:"description"}]],mt:"m",an:{doc:["Default test filter, always return true."]},nm:"defaultTestFilter"},TestListener:{pa:1,mt:"i",$m:{testExclude:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestExcludeEvent"},mt:"prm",an:{doc:["The event object."]},nm:"event"}]],$ff:1,mt:"m",an:{doc:["Called when a test is excluded from the test run due [[TestFilter]]"]},nm:"testExclude"},testRunFinish:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestRunFinishEvent"},mt:"prm",an:{doc:["The event object."]},nm:"event"}]],$ff:1,mt:"m",an:{doc:["Called after all tests have finished."]},nm:"testRunFinish"},testIgnore:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestIgnoreEvent"},mt:"prm",an:{doc:["The event object."]},nm:"event"}]],$ff:1,mt:"m",an:{doc:["Called when a test will *not* be run, because it is marked with [[ignore]] annotation."]},nm:"testIgnore"},testRunStart:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestRunStartEvent"},mt:"prm",an:{doc:["The event object."]},nm:"event"}]],$ff:1,mt:"m",an:{doc:["Called before any tests have been run."]},nm:"testRunStart"},testFinish:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestFinishEvent"},mt:"prm",an:{doc:["The event object."]},nm:"event"}]],$ff:1,mt:"m",an:{doc:["Called when a test has finished, whether the test succeeds or not."]},nm:"testFinish"},testStart:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestStartEvent"},mt:"prm",an:{doc:["The event object."]},nm:"event"}]],$ff:1,mt:"m",an:{doc:["Called when a test is about to be started."]},nm:"testStart"},testError:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestErrorEvent"},mt:"prm",an:{doc:["The event object."]},nm:"event"}]],$ff:1,mt:"m",an:{doc:["Called when a test will not be run, because some error has occurred.\nFor example a invalid test function signature."]},nm:"testError"}},an:{doc:["Represents a listener which will be notified about events that occur during a test run.\n\nExample of simple listener, which triggers alarm whenever test fails.\n\n    shared class RingingListener() satisfies TestListener {\n        shared actual void testError(TestErrorEvent event) => alarm.ring();\n    }\n\n... such listener can be used directly when creating [[TestRunner]]\n\n    TestRunner runner = createTestRunner{\n        sources = [`module com.acme`];\n        listeners = [RingingListener()];};\n\n... or better declaratively with usage of [[testListeners]] annotation\n\n    testListeners({`class RingingListener`})\n    module com.acme;"]},nm:"TestListener"},testExecutor:{$t:{pk:".",nm:"TestExecutorAnnotation"},pa:513,ps:[[{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"},mt:"prm",an:{doc:["The class declaration of [[TestExecutor]]."]},nm:"executor"}]],mt:"m",an:{doc:["Annotation to specify custom [[TestExecutor]] implementation, which will be used for running test.\n\nIt can be set on several places: on concrete test, on class which contains tests, on whole package or even module.\nIf multiple occurrences will be found, the most closest will be used.\n\n     testExecutor(`class ArquillianTestExecutor`)\n     package com.acme;"]},nm:"testExecutor"},createTestRunner:{$t:{pk:".",nm:"TestRunner"},pa:1,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:".",nm:"TestSource"}],nm:"Sequential"},mt:"prm",an:{doc:["The program elements from which tests will be executed."]},nm:"sources"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:".",nm:"TestListener"}],nm:"Sequential"},def:1,mt:"prm",an:{doc:["The listeners which will be notified about events during the test run."]},nm:"listeners"},{$t:{pk:".",nm:"TestFilter"},def:1,mt:"prm",an:{doc:["A filter function for determining which tests should be run.\nReturns true if the test should be run. \nThe default filter always returns true."]},nm:"filter"},{$t:{pk:".",nm:"TestComparator"},def:1,mt:"prm",an:{doc:["A comparator used to sort the tests, used tests in certain order.\nThe default comparator runs the tests in alphabetical order."]},nm:"comparator"}]],mt:"m",an:{doc:["Create a new [[TestRunner]] for the given test sources and configures it \naccording to the given parameters."]},nm:"createTestRunner"},ExceptionAssert:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,ps:[{$t:{md:"$",pk:"$",nm:"Throwable"},mt:"prm",an:{doc:["The exception to be checked."]},nm:"exception"}],mt:"c",$at:{exception$m677t2:{$t:{md:"$",pk:"$",nm:"Throwable"},mt:"a",an:{doc:["The exception to be checked."]},nm:"exception"}},$m:{hasMessage:{$t:{pk:".",nm:"ExceptionAssert"},pa:1,ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"String"},{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Boolean"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"String"},{pk:".",nm:"Nothing"}]},{mt:"tp",md:"$",pk:"$",nm:"String"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"}]},mt:"prm",an:{doc:["The expected message or message predicate."]},nm:"messageCondition"}]],mt:"m",an:{doc:["Verifies that the actual _exception_ has expected message."],throws:["AssertionError","When _exception_ hasn't expected message."]},nm:"hasMessage"},hasNoCause:{$t:{pk:".",nm:"ExceptionAssert"},pa:1,mt:"m",an:{doc:["Verifies that the actual _exception_ does not have a cause."],throws:["AssertionError","When _exception_ has some cause."]},nm:"hasNoCause"},hasType:{$t:{pk:".",nm:"ExceptionAssert"},pa:1,ps:[[{$t:{comp:"u",l:[{md:"$",pk:"ceylon.language.meta.model",tp:[{mt:"tp",md:"$",pk:"$",nm:"Throwable"},{mt:"tp",pk:".",nm:"Nothing"}],nm:"Class"},{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Boolean"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"ceylon.language.meta.model",tp:[{mt:"tp",md:"$",pk:"$",nm:"Throwable"},{mt:"tp",pk:".",nm:"Nothing"}],nm:"ClassModel"},{pk:".",nm:"Nothing"}]},{mt:"tp",md:"$",pk:"ceylon.language.meta.model",tp:[{mt:"tp",md:"$",pk:"$",nm:"Throwable"},{mt:"tp",pk:".",nm:"Nothing"}],nm:"ClassModel"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"}]},mt:"prm",an:{doc:["The expected type or type predicate."]},nm:"typeCondition"}]],mt:"m",an:{doc:["Verifies that the actual _exception_ has expected type."],throws:["AssertionError","When _exception_ hasn't expected type."]},nm:"hasType"}},an:{doc:["An assertions applicable to exceptions, see [[assertThatException]]."]},nm:"ExceptionAssert"},assertNotEquals:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",an:{doc:["The actual value to be checked."]},nm:"actual"},{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",an:{doc:["The expected value."]},nm:"unexpected"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},def:1,mt:"prm",an:{doc:["The message describing the problem."]},nm:"message"},{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",nm:"val1"},{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",nm:"val2"}]],def:1,mt:"prm",$pt:"f",an:{doc:["The compare function."]},nm:"compare"}]],$ff:1,mt:"m",$m:{compare$aq0ue3:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",nm:"val1"},{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",nm:"val2"}]],mt:"m",an:{doc:["The compare function."]},nm:"compare"}},an:{doc:["Fails the test if the given values are equal according to the given compare function."],throws:["AssertionComparisonError","When _actual_ == _unexpected_."]},nm:"assertNotEquals"},ignored:{super:{pk:".",nm:"TestState"},pa:1,mt:"o",an:{doc:["A test state is _ignored_, if it is marked with [[ignore]] annotation."]},nm:"ignored"},"$pkg-pa":1,test:{$t:{pk:".",nm:"TestAnnotation"},pa:513,mt:"m",an:{doc:["Marks a function as being a test.\nOnly nullary functions should be annotated with `test`.\n\nExample of simplest test:\n\n    test\n    shared void shouldAlwaysSucceed() {}"]},nm:"test"},TestSource:{pa:1,$alias:{comp:"u",l:[{md:"$",pk:"ceylon.language.meta.declaration",nm:"Module"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"Package"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"},{md:"$",pk:"ceylon.language.meta.model",tp:[{mt:"tp",md:"$",pk:"$",nm:"Anything"},{mt:"tp",md:"$",pk:"ceylon.language.meta.model",nm:"Nothing"}],nm:"Class"},{md:"$",pk:"ceylon.language.meta.model",tp:[{mt:"tp",md:"$",pk:"$",nm:"Anything"},{mt:"tp",md:"$",pk:"ceylon.language.meta.model",nm:"Nothing"}],nm:"FunctionModel"},{md:"$",pk:"$",nm:"String"}]},mt:"als",an:{doc:["Alias for program elements from which tests can be run."]},nm:"TestSource"},BeforeTestAnnotation:{super:{md:"$",pk:"$",nm:"Basic"},pa:545,sts:[{md:"$",pk:"$",tp:[{mt:"tp",pk:".",nm:"BeforeTestAnnotation"},{mt:"tp",md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"},{mt:"tp",md:"$",pk:"$",nm:"Anything"}],nm:"OptionalAnnotation"}],mt:"c",an:{doc:["Annotation class for [[beforeTest]]."]},nm:"BeforeTestAnnotation"},TestRunner:{pa:1,mt:"i",$at:{description:{$t:{pk:".",nm:"TestDescription"},pa:5,mt:"a",an:{doc:["The description of all tests to be run."]},nm:"description"}},$m:{run:{$t:{pk:".",nm:"TestRunResult"},pa:5,mt:"m",an:{doc:["Runs all the tests and returns a summary result."]},nm:"run"}},an:{doc:["Represents a facade for running tests.\n\nInstances are usually created via the [[createTestRunner]] factory method. \nFor running tests is more convenient to use command line tool `ceylon test` \nor use integration with IDE, so it is not necessary to use this API directly."]},nm:"TestRunner"},assertEquals:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",an:{doc:["The actual value to be checked."]},nm:"actual"},{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",an:{doc:["The expected value."]},nm:"expected"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},def:1,mt:"prm",an:{doc:["The message describing the problem."]},nm:"message"},{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",nm:"val1"},{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",nm:"val2"}]],def:1,mt:"prm",$pt:"f",an:{doc:["The compare function."]},nm:"compare"}]],$ff:1,mt:"m",$m:{compare$bdkxmk:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",nm:"val1"},{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",nm:"val2"}]],mt:"m",an:{doc:["The compare function."]},nm:"compare"}},an:{doc:["Fails the test if the given values are not equal according to the given compare function."],throws:["AssertionComparisonError","When _actual_ != _expected_."]},nm:"assertEquals"},TestResult:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,ps:[{$t:{pk:".",nm:"TestDescription"},pa:1,mt:"prm",an:{doc:["The test this is the result for."]},nm:"description",$hdn:1},{$t:{pk:".",nm:"TestState"},pa:1,mt:"prm",an:{doc:["The result state of this test."]},nm:"state",$hdn:1},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Throwable"}]},pa:1,def:1,mt:"prm",an:{doc:["The exception thrown during this test, if any."]},nm:"exception",$hdn:1},{$t:{md:"$",pk:"$",nm:"Integer"},pa:1,def:1,mt:"prm",an:{doc:["The total elapsed time in milliseconds."]},nm:"elapsedTime",$hdn:1}],mt:"c",$at:{exception:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Throwable"}]},pa:1,mt:"a",an:{doc:["The exception thrown during this test, if any."]},nm:"exception"},string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",nm:"string"},description:{$t:{pk:".",nm:"TestDescription"},pa:1,mt:"a",an:{doc:["The test this is the result for."]},nm:"description"},state:{$t:{pk:".",nm:"TestState"},pa:1,mt:"a",an:{doc:["The result state of this test."]},nm:"state"},elapsedTime:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1,mt:"a",an:{doc:["The total elapsed time in milliseconds."]},nm:"elapsedTime"}},an:{see:["TestRunResult"],doc:["Represents a detailed result of the execution of a particular test."]},nm:"TestResult"},fail:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},def:1,mt:"prm",an:{doc:["The message describing the problem."]},nm:"message"}]],$ff:1,mt:"m",an:{doc:["Throws an [[AssertionError]] to fail a test."],throws:["AssertionError","always"]},nm:"fail"},assertNull:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",an:{doc:["The value to be checked."]},nm:"val"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},def:1,mt:"prm",an:{doc:["The message describing the problem."]},nm:"message"}]],$ff:1,mt:"m",an:{doc:["Fails the test if the given _value_ is not null."],throws:["AssertionError","When _val_ is not null."]},nm:"assertNull"},IgnoreAnnotation:{super:{md:"$",pk:"$",nm:"Basic"},pa:545,sts:[{md:"$",pk:"$",tp:[{mt:"tp",pk:".",nm:"IgnoreAnnotation"},{comp:"u",mt:"tp",l:[{md:"$",pk:"ceylon.language.meta.declaration",nm:"FunctionDeclaration"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"Package"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"Module"}]},{mt:"tp",md:"$",pk:"$",nm:"Anything"}],nm:"OptionalAnnotation"}],ps:[{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"prm",an:{doc:["Reason why the test is ignored."]},nm:"reason"}],mt:"c",$at:{reason:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"a",an:{doc:["Reason why the test is ignored."]},nm:"reason"}},an:{doc:["Annotation class for [[ignore]]."]},nm:"IgnoreAnnotation"},success:{super:{pk:".",nm:"TestState"},pa:1,mt:"o",an:{doc:["A test state is _success_, if it complete normally (that is, does not throw an exception)."]},nm:"success"},failure:{super:{pk:".",nm:"TestState"},pa:1,mt:"o",an:{doc:["A test state is _failure_, if it propagates an [[AssertionError]]."]},nm:"failure"},TestComparator:{pa:1,$alias:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Comparison"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{pk:".",nm:"TestDescription"},{comp:"u",l:[{pk:".",nm:"TestDescription"},{pk:".",nm:"Nothing"}]}]},{mt:"tp",pk:".",nm:"TestDescription"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{pk:".",nm:"TestDescription"},{pk:".",nm:"Nothing"}]},{mt:"tp",pk:".",nm:"TestDescription"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Tuple"}],nm:"Callable"},mt:"als",an:{doc:["Alias for functions which compare two tests."]},nm:"TestComparator"},TestRunResult:{pa:1,mt:"i",$at:{ignoreCount:{$t:{md:"$",pk:"$",nm:"Integer"},pa:5,mt:"a",an:{doc:["The number of [[ignored]] tests during the test run."]},nm:"ignoreCount"},successCount:{$t:{md:"$",pk:"$",nm:"Integer"},pa:5,mt:"a",an:{doc:["The number of tests that finished [[successfully|success]]."]},nm:"successCount"},startTime:{$t:{md:"$",pk:"$",nm:"Integer"},pa:5,mt:"a",an:{doc:["The time in milliseconds when the test run started."]},nm:"startTime"},endTime:{$t:{md:"$",pk:"$",nm:"Integer"},pa:5,mt:"a",an:{doc:["The time in milliseconds when the test run finished."]},nm:"endTime"},runCount:{$t:{md:"$",pk:"$",nm:"Integer"},pa:5,mt:"a",an:{doc:["The number of executed tests."]},nm:"runCount"},results:{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:".",nm:"TestResult"}],nm:"Sequential"},pa:5,mt:"a",an:{doc:["The detailed results of each test."]},nm:"results"},failureCount:{$t:{md:"$",pk:"$",nm:"Integer"},pa:5,mt:"a",an:{doc:["The number of tests that finished with [[failure]]."]},nm:"failureCount"},errorCount:{$t:{md:"$",pk:"$",nm:"Integer"},pa:5,mt:"a",an:{doc:["The number of tests that finished with [[error]]."]},nm:"errorCount"},isSuccess:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:5,mt:"a",an:{doc:["Determine if all executed tests succeeded."]},nm:"isSuccess"},elapsedTime:{$t:{md:"$",pk:"$",nm:"Integer"},pa:5,mt:"a",an:{doc:["The total elapsed time in milliseconds."]},nm:"elapsedTime"}},an:{doc:["Represents a summary result of the test run."]},nm:"TestRunResult"},AssertionComparisonError:{super:{md:"$",pk:"$",nm:"AssertionError"},pa:1,ps:[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",an:{doc:["The message describing the problem."]},nm:"message"},{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"prm",an:{doc:["The actual string value."]},nm:"actualValue",$hdn:1},{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"prm",an:{doc:["The expected string value."]},nm:"expectedValue",$hdn:1}],mt:"c",$at:{actualValue:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"a",an:{doc:["The actual string value."]},nm:"actualValue"},expectedValue:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"a",an:{doc:["The expected string value."]},nm:"expectedValue"},message$8zncdi:{$t:{md:"$",pk:"$",nm:"String"},mt:"a",an:{doc:["The message describing the problem."]},nm:"message"}},an:{see:["assertEquals","assertNotEquals"],doc:["Thrown to indicate that two values which should have been \"the \nsame\" (according to some comparison function) were in fact \ndifferent."]},nm:"AssertionComparisonError"},equalsCompare:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",nm:"obj1"},{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",nm:"obj2"}]],mt:"m",an:{doc:["Compares two things. Returns true if both are null or both are non-null and \nare the same according to [[Object.equals]]."]},nm:"equalsCompare"},"$pkg-anns":{doc:["Contains API of the test module."]}},"$mod-bin":"8.0","$mod-anns":{license:["Apache Software License"],by:["Tom Bentley","Tomáš Hradec"],doc:["\nThe `ceylon.test` module is a simple framework to write repeatable tests.\n\nTests execute the code of the module under test and \ncan make assertions about what it does. For example,\n\n* do functions, when called with certain arguments, return the expected results?\n* do classes behave as required?\n* etc.\n\nThe usual way to use this module is to write your tests (which make\ncalls to the declarations under test) as top level functions or\nas methods of top level classes, annotating them with [[test]]. \n\nFor example, here is a trivial [[test]] function, which will always succeed.\n```\ntest\nvoid shouldAlwaysSucceed() {}\n```\n\nAssertions can be evaluated by using the language's `assert` statement \nor with the various `assert...` functions, for example:\n```\nassert(is Hobbit frodo);\nassert(exists ring);\n\nassertNotEquals(frodo, sauron);\nassertThatException(() => gandalf.castLightnings()).hasType(`NotEnoughMagicPowerException`);\n```\n\nIt's also perfectly acceptable to throw \n[[AssertionError]] directly.\n\nA test function which completes without propagating an exception is \nclassified as a [[success]]. A test function which propagates \nan [[AssertionError]] is classified as a [[failure]]. A test \nfunction which propagates any other type of `Exception` is classified as \nan [[error]].\n\nTest functions can be grouped together inside a class.\n```\nclass YodaTest() {\n\n    test\n    void shouldBeJedi() {\n        assert(yoda is Jedi);\n    }\n\n    test\n    void shouldHavePower() {\n        assert(yoda.midichloriansCount > 1k);\n    }\n```\n\nOr several tests can be combined into [[testSuite]] and then run together.\n```\ntestSuite({`class YodaTest`,\n           `class DarthVaderTest`,\n           `function starOfDeathTestSuite`})\nvoid starwarsTestSuite() {}   \n```\n\nCommon initialization logic can be placed into separate functions, \nwhich run [[before|beforeTest]] or [[after|afterTest]] each test.\n```\nclass StarshipTest() {\n\n    beforeTest void init() => starship.chargePhasers();\n\n    afterTest void dispose() => starship.shutdownSystems();\n```\n\nSometimes you want to temporarily disable a test or a group of tests, \nthis can be done via the [[ignore]] annotation.\n```\ntest\nignore(\"still not implemented\")\nvoid shouldBeFasterThanLight() {\n```\n\nThe most convenient way how to run tests is to use IDE integration\nor via command line tool `ceylon test`.\n\nTests can be also run programmatically, via interface [[TestRunner]] and its factory method [[createTestRunner]], \nbut this API is usually not necessary to use directly. \n\n"]},"ceylon.test.internal":{ErrorTestExecutor:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{pk:"ceylon.test",nm:"TestExecutor"}],ps:[{$t:{pk:"ceylon.test",nm:"TestDescription"},pa:3,mt:"prm",nm:"description",$hdn:1},{$t:{md:"$",pk:"$",nm:"Throwable"},mt:"prm",nm:"exception"}],mt:"c",$at:{exception$va2kfl:{$t:{md:"$",pk:"$",nm:"Throwable"},mt:"a",nm:"exception"},description:{$t:{pk:"ceylon.test",nm:"TestDescription"},pa:3,mt:"a",nm:"description"}},$m:{execute:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test",nm:"TestRunContext"},mt:"prm",nm:"context"}]],$ff:1,mt:"m",nm:"execute"}},nm:"ErrorTestExecutor"},TestRunResultImpl:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{pk:"ceylon.test",nm:"TestRunResult"}],mt:"c",$at:{failureCounter$auhlzn:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1024,mt:"a",nm:"failureCounter"},endTimeMilliseconds$efqgdn:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1024,mt:"a",nm:"endTimeMilliseconds"},string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",nm:"string"},startTimeMilliseconds$ck75ac:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1024,mt:"a",nm:"startTimeMilliseconds"},errorCounter$cvci01:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1024,mt:"a",nm:"errorCounter"},resultsList$mj2s01:{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestResult"}],nm:"ArrayList"},mt:"a",nm:"resultsList"},runCounter$e3kf04:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1024,mt:"a",nm:"runCounter"},successCounter$9169c4:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1024,mt:"a",nm:"successCounter"},ignoreCount:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"ignoreCount"},ignoreCounter$sp9nxh:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1024,mt:"a",nm:"ignoreCounter"},successCount:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"successCount"},startTime:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"startTime"},endTime:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"endTime"},runCount:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"runCount"},results:{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestResult"}],nm:"Sequential"},pa:3,mt:"g",nm:"results"},errorCount:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"errorCount"},failureCount:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"failureCount"},isSuccess:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"g",nm:"isSuccess"},elapsedTime:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"elapsedTime"}},$o:{listener:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{pk:"ceylon.test",nm:"TestListener"}],mt:"o",$m:{testRunFinish:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestRunFinishEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"testRunFinish"},testIgnore:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestIgnoreEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"testIgnore"},testRunStart:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestRunStartEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"testRunStart"},testFinish:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestFinishEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"testFinish"},handleResult$ltsldy:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{pk:"ceylon.test",nm:"TestResult"},mt:"prm",nm:"result"},{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"wasRun"}]],$ff:1,mt:"m",nm:"handleResult"},testError:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestErrorEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"testError"}},nm:"listener"}},nm:"TestRunResultImpl"},TestRunContextImpl:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{pk:"ceylon.test",nm:"TestRunContext"}],ps:[{$t:{pk:"ceylon.test",nm:"TestRunner"},pa:3,mt:"prm",nm:"runner",$hdn:1},{$t:{pk:"ceylon.test",nm:"TestRunResult"},pa:3,mt:"prm",nm:"result",$hdn:1}],mt:"c",$at:{result:{$t:{pk:"ceylon.test",nm:"TestRunResult"},pa:3,mt:"a",nm:"result"},listenersCache$r83bg6:{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"},{mt:"tp",pk:"ceylon.test",nm:"TestListener"}],nm:"HashMap"},mt:"a",nm:"listenersCache"},listenersList$7lxy1s:{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestListener"}],nm:"ArrayList"},mt:"a",nm:"listenersList"},runner:{$t:{pk:"ceylon.test",nm:"TestRunner"},pa:3,mt:"a",nm:"runner"}},$m:{findListeners$xakzlr:{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestListener"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:"ceylon.test",nm:"TestDescription"}]},mt:"prm",nm:"description"}]],mt:"m",nm:"findListeners"},fireTestExclude:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestExcludeEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"fireTestExclude"},removeTestListener:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestListener"}],nm:"Sequential"},mt:"prm",seq:1,nm:"listeners"}]],$ff:1,mt:"m",nm:"removeTestListener"},fireTestFinish:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestFinishEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"fireTestFinish"},findListenerClasses$yfs38k:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{pk:"ceylon.test",nm:"TestDescription"},mt:"prm",nm:"description"},{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"}],nm:"MutableSet"},mt:"prm",nm:"listenerClasses"}]],$ff:1,mt:"m",nm:"findListenerClasses"},findListenerClasses2$gv06h0:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"ceylon.language.meta.declaration",nm:"AnnotatedDeclaration"},mt:"prm",nm:"declaration"},{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",md:"$",pk:"ceylon.language.meta.declaration",nm:"ClassDeclaration"}],nm:"MutableSet"},mt:"prm",nm:"listenerClasses"}]],$ff:1,mt:"m",nm:"findListenerClasses2"},fireTestStart:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestStartEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"fireTestStart"},fireTestError:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestErrorEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"fireTestError"},fireTestIgnore:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestIgnoreEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"fireTestIgnore"},fireTestRunStart:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestRunStartEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"fireTestRunStart"},fire2$nrjy49:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestListener"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"listeners"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Anything"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{pk:"ceylon.test",nm:"TestListener"},{pk:".",nm:"Nothing"}]},{mt:"tp",pk:"ceylon.test",nm:"TestListener"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},mt:"prm",nm:"handler"},{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"propagateException"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestListener"}],nm:"Sequential"},mt:"prm",seq:1,nm:"problematicListeners"}]],$ff:1,mt:"m",nm:"fire2"},addTestListener:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestListener"}],nm:"Sequential"},mt:"prm",seq:1,nm:"listeners"}]],$ff:1,mt:"m",nm:"addTestListener"},fireTestRunFinish:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestRunFinishEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"fireTestRunFinish"},fire$rsc2rz:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:"ceylon.test",nm:"TestDescription"}]},mt:"prm",nm:"description"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Anything"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{pk:"ceylon.test",nm:"TestListener"},{pk:".",nm:"Nothing"}]},{mt:"tp",pk:"ceylon.test",nm:"TestListener"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},mt:"prm",nm:"handler"},{$t:{md:"$",pk:"$",nm:"Boolean"},def:1,mt:"prm",nm:"propagateException"}]],$ff:1,mt:"m",nm:"fire"}},nm:"TestRunContextImpl"},GroupTestExecutor:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{pk:"ceylon.test",nm:"TestExecutor"}],ps:[{$t:{pk:"ceylon.test",nm:"TestDescription"},pa:3,mt:"prm",nm:"description",$hdn:1},{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestExecutor"}],nm:"Sequential"},mt:"prm",nm:"children"}],mt:"c",$at:{description:{$t:{pk:"ceylon.test",nm:"TestDescription"},pa:3,mt:"a",nm:"description"},children$v6kjcg:{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:"ceylon.test",nm:"TestExecutor"}],nm:"Sequential"},mt:"a",nm:"children"}},$m:{compareStates$3va12g:{$t:{md:"$",pk:"$",nm:"Comparison"},ps:[[{$t:{pk:"ceylon.test",nm:"TestState"},mt:"prm",nm:"state1"},{$t:{pk:"ceylon.test",nm:"TestState"},mt:"prm",nm:"state2"}]],mt:"m",nm:"compareStates"},execute:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test",nm:"TestRunContext"},mt:"prm",nm:"context"}]],$ff:1,mt:"m",$m:{updateWorstState$1h9h85:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{pk:"ceylon.test",nm:"TestState"},mt:"prm",nm:"state"}]],$ff:1,mt:"m",nm:"updateWorstState"}},$o:{updateWorstStateListener$g62biw:{super:{md:"$",pk:"$",nm:"Basic"},sts:[{pk:"ceylon.test",nm:"TestListener"}],mt:"o",$m:{testIgnore:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestIgnoreEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"testIgnore"},testFinish:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestFinishEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"testFinish"},testError:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:"ceylon.test.event",nm:"TestErrorEvent"},mt:"prm",nm:"event"}]],$ff:1,mt:"m",nm:"testError"}},nm:"updateWorstStateListener"}},nm:"execute"}},nm:"GroupTestExecutor"},"$pkg-anns":{doc:["Contains internal implementation of the test module."]}},"$mod-name":"ceylon.test","ceylon.test.event":{"$pkg-pa":1,TestRunFinishEvent:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,ps:[{$t:{pk:"ceylon.test",nm:"TestRunner"},pa:1,mt:"prm",an:{doc:["The current test runner."]},nm:"runner",$hdn:1},{$t:{pk:"ceylon.test",nm:"TestRunResult"},pa:1,mt:"prm",an:{doc:["The summary result of the test run."]},nm:"result",$hdn:1}],mt:"c",$at:{result:{$t:{pk:"ceylon.test",nm:"TestRunResult"},pa:1,mt:"a",an:{doc:["The summary result of the test run."]},nm:"result"},string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",nm:"string"},runner:{$t:{pk:"ceylon.test",nm:"TestRunner"},pa:1,mt:"a",an:{doc:["The current test runner."]},nm:"runner"}},an:{doc:["Event fired by [[TestListener.testRunFinish]]."]},nm:"TestRunFinishEvent"},TestErrorEvent:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,ps:[{$t:{pk:"ceylon.test",nm:"TestResult"},pa:1,mt:"prm",an:{doc:["The result of the test."]},nm:"result",$hdn:1}],mt:"c",$at:{result:{$t:{pk:"ceylon.test",nm:"TestResult"},pa:1,mt:"a",an:{doc:["The result of the test."]},nm:"result"},string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",nm:"string"}},an:{doc:["Event fired by [[TestListener.testError]]."]},nm:"TestErrorEvent"},TestRunStartEvent:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,ps:[{$t:{pk:"ceylon.test",nm:"TestRunner"},pa:1,mt:"prm",an:{doc:["The current test runner."]},nm:"runner",$hdn:1},{$t:{pk:"ceylon.test",nm:"TestDescription"},pa:1,mt:"prm",an:{doc:["The description of all tests to be run."]},nm:"description",$hdn:1}],mt:"c",$at:{string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",nm:"string"},description:{$t:{pk:"ceylon.test",nm:"TestDescription"},pa:1,mt:"a",an:{doc:["The description of all tests to be run."]},nm:"description"},runner:{$t:{pk:"ceylon.test",nm:"TestRunner"},pa:1,mt:"a",an:{doc:["The current test runner."]},nm:"runner"}},an:{doc:["Event fired by [[TestListener.testRunStart]]."]},nm:"TestRunStartEvent"},TestFinishEvent:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,ps:[{$t:{pk:"ceylon.test",nm:"TestResult"},pa:1,mt:"prm",an:{doc:["The result of the test."]},nm:"result",$hdn:1},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Object"}]},pa:1,def:1,mt:"prm",an:{doc:["The instance on which the test method is invoked, if exists."]},nm:"instance",$hdn:1}],mt:"c",$at:{result:{$t:{pk:"ceylon.test",nm:"TestResult"},pa:1,mt:"a",an:{doc:["The result of the test."]},nm:"result"},instance:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Object"}]},pa:1,mt:"a",an:{doc:["The instance on which the test method is invoked, if exists."]},nm:"instance"},string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",nm:"string"}},an:{doc:["Event fired by [[TestListener.testFinish]]."]},nm:"TestFinishEvent"},toString:{$t:{md:"$",pk:"$",nm:"String"},ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"obj"},{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Object"}]}],nm:"Sequential"},mt:"prm",seq:1,nm:"attributes"}]],mt:"m",nm:"toString"},TestStartEvent:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,ps:[{$t:{pk:"ceylon.test",nm:"TestDescription"},pa:1,mt:"prm",an:{doc:["The description of the test."]},nm:"description",$hdn:1},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Object"}]},pa:1,def:1,mt:"prm",an:{doc:["The instance on which the test method is invoked, if exists."]},nm:"instance",$hdn:1}],mt:"c",$at:{instance:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Object"}]},pa:1,mt:"a",an:{doc:["The instance on which the test method is invoked, if exists."]},nm:"instance"},string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",nm:"string"},description:{$t:{pk:"ceylon.test",nm:"TestDescription"},pa:1,mt:"a",an:{doc:["The description of the test."]},nm:"description"}},an:{doc:["Event fired by [[TestListener.testStart]]."]},nm:"TestStartEvent"},TestExcludeEvent:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,ps:[{$t:{pk:"ceylon.test",nm:"TestDescription"},pa:1,mt:"prm",an:{doc:["The description of the test."]},nm:"description",$hdn:1}],mt:"c",$at:{string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",nm:"string"},description:{$t:{pk:"ceylon.test",nm:"TestDescription"},pa:1,mt:"a",an:{doc:["The description of the test."]},nm:"description"}},an:{doc:["Event fired by [[TestListener.testExclude]]."]},nm:"TestExcludeEvent"},TestIgnoreEvent:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,ps:[{$t:{pk:"ceylon.test",nm:"TestResult"},pa:1,mt:"prm",an:{doc:["The result of the test."]},nm:"result",$hdn:1}],mt:"c",$at:{result:{$t:{pk:"ceylon.test",nm:"TestResult"},pa:1,mt:"a",an:{doc:["The result of the test."]},nm:"result"},string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",nm:"string"}},an:{doc:["Event fired by [[TestListener.testIgnore]]."]},nm:"TestIgnoreEvent"},"$pkg-anns":{doc:["Contains events of the test module."]}}};
});
}(typeof define==='function' && define.amd ? define : function (factory) {
if (typeof exports!=='undefined') { factory(require, exports, module);
} else { throw 'no module loader'; }
}));
