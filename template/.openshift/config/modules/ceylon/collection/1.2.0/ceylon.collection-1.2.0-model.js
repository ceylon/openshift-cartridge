(function(define) { define(function(require, ex$, module) {
ex$.$CCMM$={"$mod-version":"1.2.0","$mod-deps":["ceylon.language\/1.2.0"],"$mod-bin":"8.0","$mod-anns":{license:["Apache Software License"],by:["Stéphane Épardaud"],doc:["Library providing general-purpose mutable lists, sets, and \nmaps.\n\nThe following interfaces define abstract mutable collection \ntypes:\n\n- [[MutableList]] is a mutable [[List]],\n- [[MutableSet]] is a mutable [[Set]], and\n- [[MutableMap]] is a mutable [[Map]].\n\nThese interfaces define abstract sorted collection types:\n\n- [[SortedSet]] is a sorted [[Set]], and\n- [[SortedMap]] is a sorted [[Map]].\n\nIn addition, dedicated [[Stack]] and [[Queue]] interfaces \nare defined, representing specialized kinds of lists.\n\nThese concrete implementations are provided:\n\n- [[ArrayList]] is a `MutableList` implemented using an\n  [[Array]].\n- [[LinkedList]] is a `MutableList` implemented using a\n  singly-linked list.\n- [[PriorityQueue]] is a `Queue` implemented using an\n  [[Array]] where the front of the queue is the smallest element\n- [[HashSet]] is a mutable hash set implemented using an \n  [[Array]] of singly-linked lists.\n- [[HashMap]] is a mutable hash map implemented using an \n  [[Array]] of singly-linked lists of [[Entry]]s.\n- [[TreeSet]] is a mutable `SortedSet` implemented using a \n  red\/black binary tree.\n- [[TreeMap]] is a mutable `SortedMap` implemented using a \n  red\/black binary tree.\n\nThe functions [[unmodifiableList]], [[unmodifiableSet]],\nand [[unmodifiableMap]] may be used to hide these mutable \nlist, set, and map implementations from clients.\n\n[[SingletonMap]] and [[SingletonSet]] are immutable \ncollections with exactly one element.\n\nFinally, [[IdentitySet]] and [[IdentityMap]] are mutable\ncollections based on [[identity|Identifiable]] instead of \nvalue equality."]},"ceylon.collection":{UnmodifiableSet:{super:{md:"$",pk:"$",nm:"Basic"},sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Set"}],ps:[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Set"},mt:"prm",nm:"set"}],mt:"c",$at:{size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"},set$4htprx:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Set"},mt:"a",nm:"set"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"}},$m:{iterator:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"element"}]],mt:"m",nm:"contains"},superset:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Object"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",nm:"superset"},intersection:{$t:{md:"$",pk:"$",tp:[{comp:"i",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],nm:"Set"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Other"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],nm:"intersection"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],mt:"m",nm:"equals"},clone:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Set"},pa:3,mt:"m",nm:"clone"},union:{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],nm:"Set"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Other"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],nm:"union"},complement:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Set"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Other"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],nm:"complement"},subset:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Object"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",nm:"subset"},each:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"step"}]],$ff:1,mt:"m",nm:"each"},exclusiveUnion:{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],nm:"Set"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Other"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],nm:"exclusiveUnion"}},tp:[{dv:"out",sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],an:{by:["Gavin King"],doc:["A wrapper class that exposes any [[Set]] as unmodifiable, \nhiding the underlying `Set` implementation from clients, \nand preventing attempts to narrow to [[MutableSet]]."]},nm:"UnmodifiableSet"},MutableSet:{pa:1,sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Set"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"SetMutator"}],mt:"i",$m:{clone:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"MutableSet"},pa:7,mt:"m",nm:"clone"}},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],an:{see:["HashSet"],by:["Stéphane Épardaud"],doc:["A [[Set]] supporting addition of new elements and removal \nof existing elements."]},nm:"MutableSet"},HashMap:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{pk:".",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"MutableMap"}],ps:[{$t:{pk:".",nm:"Stability"},def:1,mt:"prm",an:{doc:["Determines whether this is a linked hash map with a\nstable iteration order, defaulting to [[linked]]\n(stable)."]},nm:"stability"},{$t:{pk:".",nm:"Hashtable"},def:1,mt:"prm",an:{doc:["Performance-related settings for the backing array."]},nm:"hashtable"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial entries in the map, defaulting to no\ninitial entries."]},nm:"entries"}],mt:"c",$at:{hashtable$uda49w:{$t:{pk:".",nm:"Hashtable"},mt:"a",an:{doc:["Performance-related settings for the backing array."]},nm:"hashtable"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"},accurateInitialCapacity$qwzvpy:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"a",nm:"accurateInitialCapacity"},tip$66h29t:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"LinkedCell"}]},pa:1027,mt:"a",an:{doc:["Tip of the traversal linked list if in `linked` mode."]},nm:"tip"},length$g7vp02:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1027,mt:"a",an:{doc:["Number of elements in this map."]},nm:"length"},stability$b6pnod:{$t:{pk:".",nm:"Stability"},mt:"a",an:{doc:["Determines whether this is a linked hash map with a\nstable iteration order."]},nm:"stability"},entries$ujasno:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:3,mt:"a",an:{doc:["The initial entries in the map."]},nm:"entries"},store$9kaiqz:{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"Cell"}]}],nm:"Array"},pa:1027,mt:"a",an:{doc:["Array of linked lists where we store the elements.\n\nEach element is stored in a linked list from this array\nat the index of the hash code of the element, modulo \nthe array size."]},nm:"store"},head$7e95fo:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"LinkedCell"}]},pa:1027,mt:"a",an:{doc:["Head of the traversal linked list if in `linked` mode. \nStorage is done in [[store]], but traversal is done \nusing an alternative linked list maintained to have a \nstable iteration order. Note that the cells used are \nthe same as in the [[store]], except for storage we use \n[[Cell.rest]] for traversal, while for the stable \niteration we use the \n[[LinkedCell.next]]\/[[LinkedCell.previous]] attributes \nof the same cell."]},nm:"head"},first:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}]},pa:3,mt:"g",nm:"first"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},empty:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"g",nm:"empty"}},$m:{hashCode$39nm0x:{$t:{md:"$",pk:"$",nm:"Integer"},ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"}]],mt:"m",nm:"hashCode"},deleteCell$bxnuyp:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{pk:".",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"Cell"},mt:"prm",nm:"cell"}]],$ff:1,mt:"m",nm:"deleteCell"},removeEntry:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{comp:"i",l:[{nm:"Item"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"item"}]],mt:"m",nm:"removeEntry"},createCell$a7w20a:{$t:{pk:".",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"Cell"},ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},mt:"prm",nm:"entry"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"Cell"}]},mt:"prm",nm:"rest"}]],mt:"m",nm:"createCell"},getOrDefault:{$t:{comp:"u",l:[{nm:"Item"},{nm:"Default"}]},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"},{$t:{nm:"Default"},mt:"prm",nm:"default"}]],mt:"m",tp:[{nm:"Default"}],nm:"getOrDefault"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,$ff:1,mt:"m",nm:"clear"},count:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"selecting"}]],mt:"m",$m:{selecting$ucg46c:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},mt:"prm",nm:"element"}]],mt:"m",nm:"selecting"}},nm:"count"},storeIndex$e9z3xh:{$t:{md:"$",pk:"$",nm:"Integer"},ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"},{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"Cell"}]}],nm:"Array"},mt:"prm",nm:"store"}]],mt:"m",nm:"storeIndex"},put:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{nm:"Item"},mt:"prm",nm:"item"}]],mt:"m",nm:"put"},remove:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],mt:"m",nm:"remove"},each:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"step"}]],$ff:1,mt:"m",$m:{step$osjdd0:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",nm:"step"}},nm:"each"},defines:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"}]],mt:"m",nm:"defines"},checkRehash$glqfdp:{$t:{md:"$",pk:"$",nm:"Anything"},$ff:1,mt:"m",nm:"checkRehash"},iterator:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"entry"}]],mt:"m",nm:"contains"},replaceEntry:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{comp:"i",l:[{nm:"Item"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"item"},{$t:{nm:"Item"},mt:"prm",nm:"newItem"}]],mt:"m",nm:"replaceEntry"},putAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"entries"}]],$ff:1,mt:"m",nm:"putAll"},get:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"}]],mt:"m",nm:"get"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],mt:"m",nm:"equals"},clone:{$t:{pk:".",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"HashMap"},pa:3,mt:"m",nm:"clone"},addToStore$vlhtif:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"Cell"}]}],nm:"Array"},mt:"prm",nm:"store"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},mt:"prm",nm:"entry"}]],mt:"m",nm:"addToStore"}},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{nm:"Item"}],an:{by:["Stéphane Épardaud"],doc:["A [[MutableMap]] implemented as a hash map stored in an \n[[Array]] of singly linked lists of \n[[ceylon.language::Entry]]s. Each entry is assigned an \nindex in the array according to the hash code of its key. \nThe hash code of a key is defined by [[Object.hash]].\n\nThe [[stability]] of a `HashMap` controls its iteration\norder:\n\n- A [[linked]] map has a stable and meaningful order of \n  iteration. The entries of the map form a linked list, \n  where new entries are added to the end of the linked \n  list. Iteration of the map follows this linked list, from \n  least recently added elements to most recently added \n  elements.\n- An [[unlinked]] map has an unstable iteration order that \n  may change when the map is modified. The order itself is \n  not meaningful to a client.\n\nThe management of the backing array is controlled by the\ngiven [[hashtable]]."]},nm:"HashMap",$cn:{$def:{pa:1,ps:[{$t:{pk:".",nm:"Stability"},def:1,mt:"prm",an:{doc:["Determines whether this is a linked hash map with a\nstable iteration order, defaulting to [[linked]]\n(stable)."]},nm:"stability"},{$t:{pk:".",nm:"Hashtable"},def:1,mt:"prm",an:{doc:["Performance-related settings for the backing array."]},nm:"hashtable"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial entries in the map, defaulting to no\ninitial entries."]},nm:"entries"}],an:{doc:["Create a new `HashMap` with the given initial entries."]}},copy:{pa:1,ps:[{$t:{pk:".",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"HashMap"},mt:"prm",an:{doc:["The `HashMap` to copy."]},nm:"hashMap"},{$t:{pk:".",nm:"Stability"},def:1,mt:"prm",an:{doc:["Determines whether this is a linked hash map with a\nstable iteration order, defaulting to the stability\nof the copied `HashMap`."]},nm:"stability"},{$t:{pk:".",nm:"Hashtable"},def:1,mt:"prm",an:{doc:["Performance-related settings for the backing array."]},nm:"hashtable"}],an:{doc:["Create a new `HashMap` with the same initial entries as \nthe given [[hashMap]]."]},nm:"copy"}}},ArrayList:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"MutableList"},{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"SearchableList"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Stack"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Queue"}],ps:[{$t:{md:"$",pk:"$",nm:"Integer"},def:1,mt:"prm",an:{doc:["The initial size of the backing array."]},nm:"initialCapacity"},{$t:{md:"$",pk:"$",nm:"Float"},def:1,mt:"prm",an:{doc:["The factor used to determine the new size of the\nbacking array when a new backing array is allocated."]},nm:"growthFactor"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial elements of the list."]},nm:"elements"}],mt:"c",$at:{array$i32poi:{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]}],nm:"Array"},pa:1027,mt:"a",an:{doc:["The underlying array."]},nm:"array"},growthFactor$yahbl9:{$t:{md:"$",pk:"$",nm:"Float"},mt:"a",an:{doc:["The factor used to determine the new size of the\nbacking array when a new backing array is allocated."]},nm:"growthFactor"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"},top:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"top"},back:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"back"},length$u7by4j:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1027,mt:"a",an:{doc:["The number of slots of the backing array that actually \nhold elements of this list."]},nm:"length"},lastIndex:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},pa:3,mt:"g",nm:"lastIndex"},front:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"front"},first:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"first"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},initialCapacity$28ur5n:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"a",an:{doc:["The initial size of the backing array."]},nm:"initialCapacity"},capacity:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1025,mt:"g",$set:{mt:"s"},an:{doc:["The size of the backing array, which must be at least\nas large as the [[size]] of the list."]},nm:"capacity"}},$m:{occurrences:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Integer"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"},{$t:{md:"$",pk:"$",nm:"Integer"},def:1,mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},def:1,mt:"prm",nm:"length"}]],mt:"m",nm:"occurrences"},spanFrom:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"}]],mt:"m",nm:"spanFrom"},replace:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"},{$t:{nm:"Element"},mt:"prm",nm:"replacement"}]],$ff:1,mt:"m",nm:"replace"},deleteMeasure:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],$ff:1,mt:"m",nm:"deleteMeasure"},grow$67gtuw:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"increment"}]],$ff:1,mt:"m",nm:"grow"},occurs:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"},{$t:{md:"$",pk:"$",nm:"Integer"},def:1,mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},def:1,mt:"prm",nm:"length"}]],mt:"m",nm:"occurs"},offer:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",nm:"offer"},copyTo:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{comp:"u",l:[{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"ArrayList"},{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]}],nm:"Array"}]},mt:"prm",an:{doc:["The list into which to copy the elements."]},nm:"destination"},{$t:{md:"$",pk:"$",nm:"Integer"},def:1,mt:"prm",an:{doc:["The index of the first element in this array to \ncopy."]},nm:"sourcePosition"},{$t:{md:"$",pk:"$",nm:"Integer"},def:1,mt:"prm",an:{doc:["The index in the given array into which to copy the \nfirst element."]},nm:"destinationPosition"},{$t:{md:"$",pk:"$",nm:"Integer"},def:1,mt:"prm",an:{doc:["The number of elements to copy."]},nm:"length"}]],$ff:1,mt:"m",an:{doc:["Efficiently copy the elements in the segment\n`sourcePosition:length` of this list to the segment \n`destinationPosition:length` of the given \n[[destination]] `ArrayList` or `Array`."]},nm:"copyTo"},iterator:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},removeAll:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{comp:"i",mt:"tp",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"elements"}]],mt:"m",nm:"removeAll"},truncate:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"size"}]],$ff:1,mt:"m",nm:"truncate"},find:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"selecting"}]],mt:"m",nm:"find"},lastOccurrence:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"},{$t:{md:"$",pk:"$",nm:"Integer"},def:1,mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},def:1,mt:"prm",nm:"length"}]],mt:"m",nm:"lastOccurrence"},removeFirst:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],mt:"m",nm:"removeFirst"},add:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",nm:"add"},reduce:{$t:{comp:"u",l:[{nm:"Result"},{nm:"Element"},{md:"$",pk:"$",nm:"Null"}]},pa:3,ps:[[{$t:{nm:"Result"},ps:[[{$t:{comp:"u",l:[{nm:"Result"},{nm:"Element"}]},mt:"prm",nm:"partial"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"accumulating"}]],mt:"m",$m:{accumulating$r5c97f:{$t:{nm:"Result"},ps:[[{$t:{comp:"u",l:[{nm:"Result"},{nm:"Element"}]},mt:"prm",nm:"partial"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"accumulating"}},tp:[{nm:"Result"}],nm:"reduce"},swap:{$t:{md:"$",pk:"$",nm:"Anything"},pa:11,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"i"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"j"}]],$ff:1,mt:"m",nm:"swap"},getFromFirst:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],mt:"m",nm:"getFromFirst"},count:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"selecting"}]],mt:"m",$m:{selecting$yf9c1x:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"selecting"}},nm:"count"},push:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",nm:"push"},each:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"step"}]],$ff:1,mt:"m",$m:{step$kpq5hf:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",nm:"step"}},nm:"each"},accept:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"m",nm:"accept"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"element"}]],mt:"m",nm:"contains"},measure:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],mt:"m",nm:"measure"},firstOccurrence:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"},{$t:{md:"$",pk:"$",nm:"Integer"},def:1,mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},def:1,mt:"prm",nm:"length"}]],mt:"m",nm:"firstOccurrence"},deleteSpan:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"}]],$ff:1,mt:"m",nm:"deleteSpan"},insertAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"elements"}]],$ff:1,mt:"m",nm:"insertAll"},infill:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"replacement"}]],$ff:1,mt:"m",nm:"infill"},insert:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",nm:"insert"},replaceFirst:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"},{$t:{nm:"Element"},mt:"prm",nm:"replacement"}]],mt:"m",nm:"replaceFirst"},replaceLast:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"},{$t:{nm:"Element"},mt:"prm",nm:"replacement"}]],mt:"m",nm:"replaceLast"},delete:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],mt:"m",nm:"delete"},removeLast:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],mt:"m",nm:"removeLast"},remove:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],mt:"m",nm:"remove"},pop:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"m",nm:"pop"},occursAt:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"occursAt"},every:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"selecting"}]],mt:"m",$m:{selecting$x4raup:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"selecting"}},nm:"every"},store$4f5qdi:{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]}],nm:"Array"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"capacity"}]],mt:"m",nm:"store"},move:{$t:{md:"$",pk:"$",nm:"Anything"},pa:11,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"i"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"j"}]],$ff:1,mt:"m",nm:"move"},set:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",nm:"set"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,$ff:1,mt:"m",nm:"clear"},any:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"selecting"}]],mt:"m",$m:{selecting$rvvw6:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"selecting"}},nm:"any"},sortInPlace:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{md:"$",pk:"$",nm:"Comparison"},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"x"},{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"y"}]],mt:"prm",$pt:"f",an:{doc:["A comparison function that compares pairs of\nnon-null elements of the array."]},nm:"comparing"}]],$ff:1,mt:"m",$m:{comparing$6r94m6:{$t:{md:"$",pk:"$",nm:"Comparison"},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"x"},{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"y"}]],mt:"m",an:{doc:["A comparison function that compares pairs of\nnon-null elements of the array."]},nm:"comparing"}},an:{doc:["Sorts the elements in this list according to the \norder induced by the given \n[[comparison function|comparing]]. Null elements are \nsorted to the end of the list. This operation modifies \nthe list."]},nm:"sortInPlace"},findLast:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"selecting"}]],mt:"m",nm:"findLast"},spanTo:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"}]],mt:"m",nm:"spanTo"},addAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"elements"}]],$ff:1,mt:"m",nm:"addAll"},prune:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,$ff:1,mt:"m",nm:"prune"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],mt:"m",nm:"equals"},clone:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"ArrayList"},pa:3,mt:"m",nm:"clone"},span:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"}]],mt:"m",nm:"span"}},tp:[{nm:"Element"}],an:{by:["Gavin King"],doc:["A [[MutableList]] implemented using a backing [[Array]].\nAlso:\n\n- a [[Stack]], where the top of the stack is the _last_\n  element of the list, and\n- a [[Queue]], where the front of the queue is the first\n  element of the list and the back of the queue is the\n  last element of the list.\n\nThe size of the backing `Array` is called the _capacity_\nof the `ArrayList`. The capacity of a new instance is\nspecified by the given [[initialCapacity]]. The capacity is\nincreased when [[size]] exceeds the capacity. The new\ncapacity is the product of the current capacity and the\ngiven [[growthFactor]]."]},nm:"ArrayList",$cn:{$def:{pa:1,ps:[{$t:{md:"$",pk:"$",nm:"Integer"},def:1,mt:"prm",an:{doc:["The initial size of the backing array."]},nm:"initialCapacity"},{$t:{md:"$",pk:"$",nm:"Float"},def:1,mt:"prm",an:{doc:["The factor used to determine the new size of the\nbacking array when a new backing array is allocated."]},nm:"growthFactor"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial elements of the list."]},nm:"elements"}],an:{doc:["Create a new `ArrayList` with the given initial \n[[elements]]."]}},ofSize:{pa:1,ps:[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",an:{doc:["The size of the resulting list. If the size is \nnon-positive, an empty list will be created."]},nm:"size"},{$t:{nm:"Element"},mt:"prm",an:{doc:["The element value with which to populate the list. \nAll elements of the resulting list will have the \nsame value."]},nm:"element"},{$t:{md:"$",pk:"$",nm:"Float"},def:1,mt:"prm",an:{doc:["The factor used to determine the new size of the\nbacking array when a new backing array is allocated."]},nm:"growthFactor"}],an:{doc:["Create a new `ArrayList` of the given [[size]], \npopulating every index with the given [[element]]. If \n`size<=0`, the new list will have no elements."]},nm:"ofSize"},copy:{pa:1,ps:[{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"ArrayList"},mt:"prm",an:{doc:["The `ArrayList` to copy."]},nm:"arrayList"},{$t:{md:"$",pk:"$",nm:"Float"},def:1,mt:"prm",an:{doc:["The factor used to determine the new size of the\nbacking array when a new backing array is allocated."]},nm:"growthFactor"}],an:{doc:["Create a new `ArrayList` with the same initial elements \nas the given [[arrayList]]."]},nm:"copy"}}},MutableMap:{pa:1,sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Map"},{pk:".",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"MapMutator"}],mt:"i",$m:{clone:{$t:{pk:".",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"MutableMap"},pa:7,mt:"m",nm:"clone"},put:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:7,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{nm:"Item"},mt:"prm",nm:"item"}]],mt:"m",an:{doc:["Add an entry to this map, overwriting any existing \nentry for the given [[key]], and returning the previous \nvalue associated with the given `key`, if any, or \n`null` if no existing entry was overwritten."]},nm:"put"},remove:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:7,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],mt:"m",an:{doc:["Remove the entry associated with the given [[key]], if \nany, from this map, returning the value no longer \nassociated with the given `key`, if any, or `null` if\nthere was no entry associated with the given `key`."]},nm:"remove"}},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{nm:"Item"}],an:{see:["HashMap"],by:["Stéphane Épardaud"],doc:["A [[Map]] supporting addition of new entries and removal of\nexisting entries."]},nm:"MutableMap"},Counter:{super:{md:"$",pk:"$",nm:"Basic"},ps:[{$t:{md:"$",pk:"$",nm:"Integer"},pa:1025,mt:"prm",nm:"count",$hdn:1}],mt:"c",$at:{count:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1025,mt:"a",nm:"count"}},nm:"Counter"},MutableList:{pa:1,sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"ListMutator"}],mt:"i",$m:{move:{$t:{md:"$",pk:"$",nm:"Anything"},pa:11,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"i"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"j"}]],$ff:1,mt:"m",nm:"move"},swap:{$t:{md:"$",pk:"$",nm:"Anything"},pa:11,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"i"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"j"}]],$ff:1,mt:"m",nm:"swap"},deleteFirst:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:11,mt:"m",an:{doc:["Remove the element with index `0` from this list,\nreturning the removed element, or `null` if there was\nno such element."]},nm:"deleteFirst"},deleteLast:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:11,mt:"m",an:{doc:["Remove the element with index `size-1` from this list,\nreturning the removed element, or `null` if there was\nno such element."]},nm:"deleteLast"},clone:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"MutableList"},pa:7,mt:"m",an:{doc:["A new list with the same elements as this list."]},nm:"clone"},delete:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:7,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],mt:"m",an:{doc:["Remove the element at the specified [[index]],\nreturning the removed element, if any, or `null` if\nthere was no such element."]},nm:"delete"}},tp:[{nm:"Element"}],an:{see:["LinkedList","ArrayList"],by:["Stéphane Épardaud"],doc:["A [[List]] supporting addition, insertion, removal, and\nreplacement of its elements."]},nm:"MutableList"},TreeSet:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"MutableSet"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"SortedSet"},{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",nm:"Element"},{mt:"tp",pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"TreeSet"}],nm:"Ranged"}],ps:[{$t:{md:"$",pk:"$",nm:"Comparison"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"x"},{$t:{nm:"Element"},mt:"prm",nm:"y"}]],mt:"prm",$pt:"f",an:{doc:["A comparator function used to sort the elements."]},nm:"compare"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial elements of the set."]},nm:"elements"}],mt:"c",$at:{last:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"last"},map$n8fv26:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"},{mt:"tp",nm:"Element"}],nm:"TreeMap"},pa:3,mt:"a",nm:"map"},first:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"first"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"}},$m:{add:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"add"},ascendingElements:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"from"},{$t:{nm:"Element"},mt:"prm",nm:"to"}]],mt:"m",nm:"ascendingElements"},higherElements:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"higherElements"},spanFrom:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"TreeSet"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"from"}]],mt:"m",nm:"spanFrom"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,$ff:1,mt:"m",nm:"clear"},union:{$t:{pk:".",tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],nm:"HashSet"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Other"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],nm:"union"},remove:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"remove"},compare$i3xpjz:{$t:{md:"$",pk:"$",nm:"Comparison"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"x"},{$t:{nm:"Element"},mt:"prm",nm:"y"}]],mt:"m",an:{doc:["A comparator function used to sort the elements."]},nm:"compare"},exclusiveUnion:{$t:{pk:".",tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],nm:"HashSet"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Other"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],nm:"exclusiveUnion"},spanTo:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"TreeSet"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"to"}]],mt:"m",nm:"spanTo"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"element"}]],mt:"m",nm:"contains"},iterator:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},lowerElements:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"lowerElements"},measure:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"TreeSet"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],mt:"m",nm:"measure"},intersection:{$t:{pk:".",tp:[{comp:"i",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],nm:"HashSet"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Other"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],nm:"intersection"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],mt:"m",nm:"equals"},clone:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"TreeSet"},pa:3,mt:"m",nm:"clone"},descendingElements:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"from"},{$t:{nm:"Element"},mt:"prm",nm:"to"}]],mt:"m",nm:"descendingElements"},complement:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"HashSet"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Other"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],nm:"complement"},span:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"TreeSet"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"from"},{$t:{nm:"Element"},mt:"prm",nm:"to"}]],mt:"m",nm:"span"}},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],an:{see:["naturalOrderTreeSet"],by:["Gavin King"],doc:["A [[MutableSet]] implemented using a red\/black tree.\nElements of the set are maintained in a sorted order, from\nsmallest to largest, as determined by the given\n[[comparator function|compare]]."]},nm:"TreeSet",$cn:{$def:{pa:1,ps:[{$t:{md:"$",pk:"$",nm:"Comparison"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"x"},{$t:{nm:"Element"},mt:"prm",nm:"y"}]],mt:"prm",$pt:"f",an:{doc:["A comparator function used to sort the elements."]},nm:"compare"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial elements of the set."]},nm:"elements"}],$m:{compare$dvhwyv:{$t:{md:"$",pk:"$",nm:"Comparison"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"x"},{$t:{nm:"Element"},mt:"prm",nm:"y"}]],mt:"m",an:{doc:["A comparator function used to sort the elements."]},nm:"compare"}},an:{doc:["Create a new `TreeSet` with the given \n[[comparator function|compare]] and [[elements]]."]}},copy:{pa:1,ps:[{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"TreeSet"},mt:"prm",nm:"treeSet"}],an:{doc:["Create a new `TreeMap` with the same comparator \nfunction and elements as the given [[treeSet]]."]},nm:"copy"}}},Cell:{super:{md:"$",pk:"$",nm:"Basic"},ps:[{$t:{nm:"Element"},pa:1025,mt:"prm",an:{doc:["The element belonging to this link."]},nm:"element",$hdn:1},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]},pa:1025,mt:"prm",an:{doc:["The next link in the list."]},nm:"rest",$hdn:1}],mt:"c",$at:{rest:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]},pa:1025,mt:"a",an:{doc:["The next link in the list."]},nm:"rest"},element:{$t:{nm:"Element"},pa:1025,mt:"a",an:{doc:["The element belonging to this link."]},nm:"element"}},$m:{clone:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"},pa:1,mt:"m",nm:"clone"}},tp:[{nm:"Element"}],an:{doc:["A link in a singly linked list."]},nm:"Cell"},group:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Group"},{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Sequence"}],nm:"Map"},pa:1,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"elements"},{$t:{nm:"Group"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",an:{doc:["A function that returns the group key under which to \ngroup the specified element."]},nm:"grouping",$hdn:1}]],mt:"m",$m:{mapping$dp6ds0:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Sequence"},ps:[[{$t:{nm:"Group"},mt:"prm",nm:"group"},{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"ArrayList"},mt:"prm",nm:"list"}]],mt:"m",nm:"mapping"},grouping$h95l9c:{$t:{nm:"Group"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",an:{doc:["A function that returns the group key under which to \ngroup the specified element."]},nm:"grouping"}},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Group"},{nm:"Element"}],an:{doc:["Produces a [[Map]] grouping the given [[elements]] into \nsequences under the group keys provided by the given \n[[grouping function|grouping]]."]},nm:"group"},HashSet:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"MutableSet"}],ps:[{$t:{pk:".",nm:"Stability"},def:1,mt:"prm",an:{doc:["Determines whether this is a linked hash set with a\nstable iteration order, defaulting to [[linked]]\n(stable)."]},nm:"stability"},{$t:{pk:".",nm:"Hashtable"},def:1,mt:"prm",an:{doc:["Performance-related settings for the backing array."]},nm:"hashtable"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial elements of the set, defaulting to no\ninitial elements."]},nm:"elements"}],mt:"c",$at:{head$aif3m6:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"LinkedCell"}]},pa:1027,mt:"a",an:{doc:["Head of the traversal linked list if in `linked` mode. \nStorage is done in [[store]], but traversal is done\nusing an alternative linked list maintained to have a \nstable iteration order. Note that the cells used are \nthe same as in the [[store]], except for storage we use \n[[Cell.rest]] for traversal, while for the stable \niteration we use the \n[[LinkedCell.next]]\/[[LinkedCell.previous]] attributes \nof the same cell."]},nm:"head"},tip$9an0gb:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"LinkedCell"}]},pa:1027,mt:"a",an:{doc:["Tip of the traversal linked list if in `linked` mode."]},nm:"tip"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"},last:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"last"},stability$82jphv:{$t:{pk:".",nm:"Stability"},mt:"a",an:{doc:["Determines whether this is a linked hash set with a\nstable iteration order."]},nm:"stability"},length$d3pqtk:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1027,mt:"a",an:{doc:["Number of elements in this set."]},nm:"length"},accurateInitialCapacity$nstxjg:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"a",nm:"accurateInitialCapacity"},hashtable$xhg2ge:{$t:{pk:".",nm:"Hashtable"},mt:"a",an:{doc:["Performance-related settings for the backing array."]},nm:"hashtable"},elements$ce2sq9:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:3,mt:"a",an:{doc:["The initial elements of the set."]},nm:"elements"},store$coggxh:{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]}],nm:"Array"},pa:1027,mt:"a",an:{doc:["Array of linked lists where we store the elements.\n\nEach element is stored in a linked list from this array\nat the index of the hash code of the element, modulo \nthe array size."]},nm:"store"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},first:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"first"}},$m:{add:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"add"},deleteCell$8thws7:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"},mt:"prm",nm:"cell"}]],$ff:1,mt:"m",nm:"deleteCell"},createCell$73q3ts:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"elem"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]},mt:"prm",nm:"rest"}]],mt:"m",nm:"createCell"},checkRehash$dhkh77:{$t:{md:"$",pk:"$",nm:"Anything"},$ff:1,mt:"m",nm:"checkRehash"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,$ff:1,mt:"m",nm:"clear"},count:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"selecting"}]],mt:"m",$m:{selecting$cex662:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"selecting"}},nm:"count"},hashCode$6dtk7f:{$t:{md:"$",pk:"$",nm:"Integer"},ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"}]],mt:"m",nm:"hashCode"},union:{$t:{pk:".",tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],nm:"HashSet"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Other"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],nm:"union"},remove:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"remove"},each:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"step"}]],$ff:1,mt:"m",$m:{step$sb1qlu:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",nm:"step"}},nm:"each"},exclusiveUnion:{$t:{pk:".",tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],nm:"HashSet"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Other"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],nm:"exclusiveUnion"},iterator:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"element"}]],mt:"m",nm:"contains"},storeIndex$b5t5qz:{$t:{md:"$",pk:"$",nm:"Integer"},ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"elem"},{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]}],nm:"Array"},mt:"prm",nm:"store"}]],mt:"m",nm:"storeIndex"},addAll:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"elements"}]],mt:"m",nm:"addAll"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],mt:"m",nm:"equals"},intersection:{$t:{pk:".",tp:[{comp:"i",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],nm:"HashSet"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Other"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],nm:"intersection"},clone:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"HashSet"},pa:3,mt:"m",nm:"clone"},complement:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"HashSet"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Other"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],nm:"complement"},addToStore$ypnrox:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]}],nm:"Array"},mt:"prm",nm:"store"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"addToStore"}},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],an:{by:["Stéphane Épardaud","Gavin King"],doc:["A [[MutableSet]] implemented as a hash set stored in an \n[[Array]] of singly linked lists. Each element is assigned \nan index of the array according to its hash code. The hash \ncode of an element is defined by [[Object.hash]].\n\nThe [[stability]] of a `HashSet` controls its iteration\norder:\n\n- A [[linked]] set has a stable and meaningful order of \n  iteration. The elements of the set form a linked list, \n  where new elements are added to the end of the linked \n  list. Iteration of the set follows this linked list, from \n  least recently added elements to most recently added \n  elements.\n- An [[unlinked]] set has an unstable iteration order that \n  may change when the set is modified. The order itself is \n  not meaningful to a client.\n\nThe management of the backing array is controlled by the\ngiven [[hashtable]]."]},nm:"HashSet",$cn:{$def:{pa:1,ps:[{$t:{pk:".",nm:"Stability"},def:1,mt:"prm",an:{doc:["Determines whether this is a linked hash set with a\nstable iteration order, defaulting to [[linked]]\n(stable)."]},nm:"stability"},{$t:{pk:".",nm:"Hashtable"},def:1,mt:"prm",an:{doc:["Performance-related settings for the backing array."]},nm:"hashtable"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial elements of the set, defaulting to no\ninitial elements."]},nm:"elements"}],an:{doc:["Create a new `HashSet` with the given initial elements."]}},copy:{pa:1,ps:[{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"HashSet"},mt:"prm",an:{doc:["The `HashSet` to copy."]},nm:"hashSet"},{$t:{pk:".",nm:"Stability"},def:1,mt:"prm",an:{doc:["Determines whether this is a linked hash set with a\nstable iteration order, defaulting to the stability\nof the copied `HashSet`."]},nm:"stability"},{$t:{pk:".",nm:"Hashtable"},def:1,mt:"prm",an:{doc:["Performance-related settings for the backing array."]},nm:"hashtable"}],an:{doc:["Create a new `HashSet` with the same initial elements\nas the given [[hashSet]]."]},nm:"copy"}}},Stability:{super:{md:"$",pk:"$",nm:"Basic"},pa:257,mt:"c",of:[{pk:".",nm:"unlinked"},{pk:".",nm:"linked"}],nm:"Stability"},"$pkg-pa":1,invert:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Item"},{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"}],nm:"Sequence"}],nm:"Map"},ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Map"},mt:"prm",nm:"map"}]],mt:"m",$m:{mapping$ii3181:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"}],nm:"Sequence"},ps:[[{$t:{nm:"Item"},mt:"prm",nm:"item"},{$t:{pk:".",tp:[{mt:"tp",nm:"Key"}],nm:"ArrayList"},mt:"prm",nm:"sa"}]],mt:"m",nm:"mapping"}},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Item"}],an:{doc:["Invert a [[Map]], producing a map from items to sequences \nof keys. Since various keys in the [[original map|map]] may \nmap to the same item, the resulting map contains a sequence \nof keys for each distinct item."]},nm:"invert"},PriorityQueue:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Collection"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Queue"}],ps:[{$t:{md:"$",pk:"$",nm:"Comparison"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"x"},{$t:{nm:"Element"},mt:"prm",nm:"y"}]],mt:"prm",$pt:"f",an:{doc:["A comparator function used to order elements."]},nm:"compare",$hdn:1},{$t:{md:"$",pk:"$",nm:"Integer"},def:1,mt:"prm",an:{doc:["The initial size of the backing array."]},nm:"initialCapacity",$hdn:1},{$t:{md:"$",pk:"$",nm:"Float"},def:1,mt:"prm",an:{doc:["The factor used to determine the new size of the\nbacking array when a new backing array is allocated."]},nm:"growthFactor",$hdn:1},{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial elements of the queue."]},nm:"elements",$hdn:1}],mt:"c",$at:{growthFactor$k15cw7:{$t:{md:"$",pk:"$",nm:"Float"},mt:"a",an:{doc:["The factor used to determine the new size of the\nbacking array when a new backing array is allocated."]},nm:"growthFactor"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"},last:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",an:{doc:["The element currently at the end of the\nqueue, or `null` if the queue is empty.\nThis is not necessarily the largest element\n(regarding the order relation defined by\n[[compare]]) of the queue."]},nm:"last"},elements$ra338u:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"a",an:{doc:["The initial elements of the queue."]},nm:"elements"},length$qkg55j:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1027,mt:"a",nm:"length"},back:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",an:{doc:["The element currently at the end of the\nqueue, or `null` if the queue is empty.\nThis is not necessarily the largest element\n(regarding the order relation defined by\n[[compare]]) of the queue."]},nm:"back"},front:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",an:{doc:["The smallest element (regarding the order\nrelation defined by [[compare]]) of the\nqueue, or `null` if the queue is empty."]},nm:"front"},initialCapacity$gi6pup:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"a",an:{doc:["The initial size of the backing array."]},nm:"initialCapacity"},array$3tqqzg:{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]}],nm:"Array"},pa:1027,mt:"a",nm:"array"}},$m:{rightChild$rhsywd:{$t:{md:"$",pk:"$",nm:"Integer"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],mt:"m",an:{doc:["Consider i1 as index in an array whose first element index is 1\nConsider i0 as index in an array whose first element index is 0\ni1 = i0 + 1\nright child index is defined by right1 = i1 * 2 + 1\nright0 =  i0 * 2 + 2"]},nm:"rightChild"},compare$gs4c5s:{$t:{md:"$",pk:"$",nm:"Comparison"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"x"},{$t:{nm:"Element"},mt:"prm",nm:"y"}]],mt:"m",an:{doc:["A comparator function used to order elements."]},nm:"compare"},haveKnownSize$7k454f:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"elements"}]],mt:"m",nm:"haveKnownSize"},bubbleUp$yevw4e:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],$ff:1,mt:"m",nm:"bubbleUp"},swap$snqivi:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"first"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"second"}]],$ff:1,mt:"m",nm:"swap"},bubbleDown$daf9xt:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],$ff:1,mt:"m",nm:"bubbleDown"},elt$lqn120:{$t:{nm:"Element"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],mt:"m",nm:"elt"},parent$w5yb7:{$t:{md:"$",pk:"$",nm:"Integer"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],mt:"m",an:{doc:["Consider i1 as index in an array whose first element index is 1\nConsider i0 as index in an array whose first element index is 0\ni1 = i0 + 1\nparent index is defined by parent1 = i1 \/ 2\nparent0 =  (i0 + 1) \/ 2 - 1"]},nm:"parent"},leftChild$bif9ts:{$t:{md:"$",pk:"$",nm:"Integer"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],mt:"m",an:{doc:["Consider i1 as index in an array whose first element index is 1\nConsider i0 as index in an array whose first element index is 0\ni1 = i0 + 1\nleft child index is defined by left1 = i1 * 2\nleft0 =  i0 * 2 + 1"]},nm:"leftChild"},accept:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"m",an:{doc:["Remove and return the smallest element\n([[front]] element) from this queue"]},nm:"accept"},addInitialElements$lh42w3:{$t:{md:"$",pk:"$",nm:"Anything"},$ff:1,mt:"m",nm:"addInitialElements"},offer:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",an:{doc:["Add a new element to the queue."]},nm:"offer"},iterator:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Iterator"},pa:3,mt:"m",$o:{it$vzhf3q:{super:{md:"$",pk:"$",nm:"Basic"},sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Iterator"}],mt:"o",$at:{index$epjk09:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1024,mt:"a",nm:"index"}},$m:{next:{$t:{comp:"u",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Finished"}]},pa:3,mt:"m",nm:"next"}},nm:"it"}},an:{doc:["An iterator for the elements belonging to this queue.\nElements returned by this iterator are not ordered"]},nm:"iterator"},grow$kgssjy:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"increment"}]],$ff:1,mt:"m",nm:"grow"},clone:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"PriorityQueue"},pa:3,mt:"m",nm:"clone"},add$lnahnw:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",nm:"add"},store$iohp2k:{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]}],nm:"Array"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"capacity"}]],mt:"m",nm:"store"},compareIndexes$ilkd5i:{$t:{md:"$",pk:"$",nm:"Comparison"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"first"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"second"}]],mt:"m",nm:"compareIndexes"},minChildrenIndex$1y297w:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],mt:"m",nm:"minChildrenIndex"}},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],an:{by:["Loic Rouchon"],doc:["A [[Queue]] implemented using a backing [[Array]] where\nthe front of the queue is the smallest element according\nto the order relation defined by [[compare]] function.\nNote that this implementation doesn't guarantee the back\/last\nelement to be the largest element of the queue.\n\nThe size of the backing `Array` is called the _capacity_\nof the `PriorityQueue`. The capacity of a new instance is\nspecified by the given [[initialCapacity]]. The capacity is\nincreased when [[size]] exceeds the capacity. The new\ncapacity is the product of the needed capacity and the\ngiven [[growthFactor]]."]},nm:"PriorityQueue"},LinkedList:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"MutableList"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Stack"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Queue"}],ps:[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial elements of the list."]},nm:"elements"}],mt:"c",$at:{length$5zg48z:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1027,mt:"a",nm:"length"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"},last:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"last"},top:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"top"},head$hmoq6r:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]},pa:1027,mt:"a",nm:"head"},tail$9m8bs3:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]},pa:1027,mt:"a",nm:"tail"},back:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"back"},lastIndex:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},pa:3,mt:"g",nm:"lastIndex"},front:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"front"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},first:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"first"}},$m:{infill:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"replacement"}]],$ff:1,mt:"m",nm:"infill"},spanFrom:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"}]],mt:"m",nm:"spanFrom"},replace:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"},{$t:{nm:"Element"},mt:"prm",nm:"replacement"}]],$ff:1,mt:"m",nm:"replace"},insert:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",nm:"insert"},replaceFirst:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"},{$t:{nm:"Element"},mt:"prm",nm:"replacement"}]],mt:"m",nm:"replaceFirst"},replaceLast:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"},{$t:{nm:"Element"},mt:"prm",nm:"replacement"}]],mt:"m",nm:"replaceLast"},deleteMeasure:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],$ff:1,mt:"m",nm:"deleteMeasure"},firstIndexWhere:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",an:{doc:["The predicate function the indexed elements \nmust satisfy"]},nm:"selecting"}]],mt:"m",$m:{selecting$z13rf9:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],mt:"m",an:{doc:["The predicate function the indexed elements \nmust satisfy"]},nm:"selecting"}},nm:"firstIndexWhere"},delete:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],mt:"m",nm:"delete"},removeLast:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],mt:"m",nm:"removeLast"},remove:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],mt:"m",nm:"remove"},advanceBy$cg1mjm:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"cells"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]},mt:"prm",nm:"start"}]],mt:"m",nm:"advanceBy"},defines:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],mt:"m",nm:"defines"},pop:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"m",nm:"pop"},offer:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",nm:"offer"},removeAll:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{comp:"i",mt:"tp",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"elements"}]],mt:"m",nm:"removeAll"},iterator:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},addToTail$qbzc49:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",nm:"addToTail"},truncate:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"size"}]],$ff:1,mt:"m",nm:"truncate"},find:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"elem"}]],mt:"prm",$pt:"f",nm:"selecting"}]],mt:"m",$m:{selecting$7thw3j:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"elem"}]],mt:"m",nm:"selecting"}},nm:"find"},removeFirst:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],mt:"m",nm:"removeFirst"},every:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"selecting"}]],mt:"m",$m:{selecting$vahkfl:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"selecting"}},nm:"every"},add:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",nm:"add"},reduce:{$t:{comp:"u",l:[{nm:"Result"},{nm:"Element"},{md:"$",pk:"$",nm:"Null"}]},pa:3,ps:[[{$t:{nm:"Result"},ps:[[{$t:{comp:"u",l:[{nm:"Result"},{nm:"Element"}]},mt:"prm",nm:"partial"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"accumulating"}]],mt:"m",$m:{accumulating$szlzmj:{$t:{nm:"Result"},ps:[[{$t:{comp:"u",l:[{nm:"Result"},{nm:"Element"}]},mt:"prm",nm:"partial"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"accumulating"}},tp:[{nm:"Result"}],nm:"reduce"},lastIndexWhere:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",an:{doc:["The predicate function the indexed elements \nmust satisfy."]},nm:"selecting"}]],mt:"m",$m:{selecting$kj73wf:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],mt:"m",an:{doc:["The predicate function the indexed elements \nmust satisfy."]},nm:"selecting"}},nm:"lastIndexWhere"},set:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",nm:"set"},getFromFirst:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],mt:"m",nm:"getFromFirst"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,$ff:1,mt:"m",nm:"clear"},count:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"selecting"}]],mt:"m",$m:{selecting$wkzlmt:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"selecting"}},nm:"count"},any:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"selecting"}]],mt:"m",$m:{selecting$2m5mba:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"selecting"}},nm:"any"},each:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"step"}]],$ff:1,mt:"m",$m:{step$mjzvwj:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",nm:"step"}},nm:"each"},push:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",nm:"push"},findLast:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"elem"}]],mt:"prm",$pt:"f",nm:"selecting"}]],mt:"m",$m:{selecting$fmkd9h:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"elem"}]],mt:"m",nm:"selecting"}},nm:"findLast"},accept:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"m",nm:"accept"},spanTo:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"}]],mt:"m",nm:"spanTo"},sequence:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Sequential"},pa:3,mt:"m",nm:"sequence"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"element"}]],mt:"m",nm:"contains"},measure:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],mt:"m",nm:"measure"},addAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"elements"}]],$ff:1,mt:"m",nm:"addAll"},prune:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,$ff:1,mt:"m",nm:"prune"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],mt:"m",nm:"equals"},deleteSpan:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"}]],$ff:1,mt:"m",nm:"deleteSpan"},clone:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"LinkedList"},pa:3,mt:"m",nm:"clone"},insertAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"elements"}]],$ff:1,mt:"m",nm:"insertAll"},collect:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Result"}],nm:"Sequential"},pa:3,ps:[[{$t:{nm:"Result"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",an:{doc:["The transformation applied to the elements."]},nm:"collecting"}]],mt:"m",tp:[{nm:"Result"}],nm:"collect"},span:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"}]],mt:"m",nm:"span"}},tp:[{nm:"Element"}],an:{by:["Stéphane Épardaud"],doc:["A [[MutableList]] implemented as a singly linked list.\nAlso:\n\n- a [[Stack]], where the top of the stack is the _first_\n  element of the list, and\n- a [[Queue]], where the front of the queue is the first\n  element of the list and the back of the queue is the\n  last element of the list."]},nm:"LinkedList",$cn:{$def:{pa:1,ps:[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial elements of the list."]},nm:"elements"}],an:{doc:["Create a new `LinkedList` with the given initial \n[[elements]]."]}},copy:{pa:1,ps:[{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"LinkedList"},mt:"prm",an:{doc:["The `LinkedList` to copy."]},nm:"linkedList"}],an:{doc:["Create a new `LinkedList` with the same initial \nelements as the given [[linkedList]]."]},nm:"copy"}}},unmodifiableMap:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Map"},pa:1,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Map"},mt:"prm",nm:"map"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{nm:"Item"}],an:{doc:["Wrap the given [[Map]], preventing attempts to narrow the\nreturned `Map` to [[MutableMap]]."]},nm:"unmodifiableMap"},Stack:{pa:1,mt:"i",$at:{top:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:5,mt:"a",an:{doc:["The element currently at the top of the stack, \nor `null` if the stack is empty."]},nm:"top"}},$m:{pop:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:5,mt:"m",an:{doc:["Remove and return the element at the top of \nthe stack."]},nm:"pop"},push:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",an:{doc:["Push a new element onto the top of the stack."]},nm:"push"}},tp:[{nm:"Element"}],an:{see:["LinkedList","ArrayList","Queue"],doc:["Abstract supertype of datastructures that can be \nused as LIFO stacks.\n\nA `Stack` has a well-defined [[top]]. Elements \nmay be added to the top of the stack by [[push]], \nand removed from the top of the stack by [[pop]].\n\nNote that many `Stack`s are also [[List]]s, but \nthere is no defined relationship between the \norder of elements in the list and the direction \nof the stack. In particular, the top of the stack\nmay be first element of the list, or it may be\nthe last element of the list."]},nm:"Stack"},unmodifiableList:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},pa:1,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},mt:"prm",nm:"list"}]],mt:"m",tp:[{nm:"Element"}],an:{doc:["Wrap the given [[List]], preventing attempts to narrow the\nreturned `List` to [[MutableList]]."]},nm:"unmodifiableList"},SortedMap:{pa:1,sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Map"},{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",pk:".",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"SortedMap"}],nm:"Ranged"}],mt:"i",$m:{lowerEntries:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:5,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],mt:"m",an:{doc:["The entries with keys smaller than or equal to the \ngiven [[key]], sorted by key _in descending order_. \n\nThis is a lazy operation, returning a view of the \nunderlying sorted map."]},nm:"lowerEntries"},higherEntries:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:5,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],mt:"m",an:{doc:["The entries with keys larger than or equal to the given \n[[key]], sorted by key in ascending order. \n\nThis is a lazy operation, returning a view of the \nunderlying sorted map."]},nm:"higherEntries"},ascendingEntries:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:5,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"from"},{$t:{nm:"Key"},mt:"prm",nm:"to"}]],mt:"m",an:{doc:["The entries with keys larger than or equal to the first \ngiven [[value|from]], and smaller than or equal to the \nsecond given [[value|to]], sorted in ascending order. \n\nThis is a lazy operation, returning a view of the \nunderlying sorted map."]},nm:"ascendingEntries"},descendingEntries:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:5,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"from"},{$t:{nm:"Key"},mt:"prm",nm:"to"}]],mt:"m",an:{doc:["The entries with keys smaller than or equal to the \nfirst given [[value|from]], and larger than or equal to \nthe second given [[value|to]], sorted _in descending \norder_. \n\nThis is a lazy operation, returning a view of the \nunderlying sorted map."]},nm:"descendingEntries"}},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{dv:"out",nm:"Item"}],an:{by:["Gavin King"],doc:["A [[Map]] that maintains its entries in sorted order."]},nm:"SortedMap"},UnmodifiableMap:{super:{md:"$",pk:"$",nm:"Basic"},sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Map"}],ps:[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Map"},mt:"prm",nm:"map"}],mt:"c",$at:{size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"},keys:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"}],nm:"Collection"},pa:3,mt:"g",nm:"keys"},items:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Item"}],nm:"Collection"},pa:3,mt:"a",nm:"items"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},map$7h6pyp:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Map"},mt:"a",nm:"map"}},$m:{iterator:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},get:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"}]],mt:"m",nm:"get"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],mt:"m",nm:"equals"},clone:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Map"},pa:3,mt:"m",nm:"clone"},each:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"step"}]],$ff:1,mt:"m",nm:"each"},defines:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"}]],mt:"m",nm:"defines"}},tp:[{dv:"out",sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{dv:"out",nm:"Item"}],an:{by:["Gavin King"],doc:["A wrapper class that exposes any [[Map]] as unmodifiable, \nhiding the underlying `Map` implementation from clients, \nand preventing attempts to narrow to [[MutableMap]]."]},nm:"UnmodifiableMap"},entryStore:{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"Cell"}]}],nm:"Array"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"size"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{nm:"Item"}],an:{doc:["Create a backing array for storing linked lists of hash map\nentries"]},nm:"entryStore"},spanToMeasure:{$t:{pk:"$",l:[{md:"$",pk:"$",nm:"Integer"},{md:"$",pk:"$",nm:"Integer"},{md:"$",pk:"$",nm:"Boolean"}],nm:"Tuple"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"size"}]],mt:"m",an:{doc:["Converts the indexes of a span to those of an equivalent \nmeasure which may be reversed (the span might have \n`from > to` to express that the elements of the segment \nshould be reversed). The returned tuple is of this form:\n\n    [start, length, reversed]"]},nm:"spanToMeasure"},LinkedCellIterator:{super:{md:"$",pk:"$",nm:"Basic"},sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Iterator"}],ps:[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"LinkedCell"}]},pa:1024,mt:"prm",nm:"iter",$hdn:1}],mt:"c",$at:{iter$rxmm2v:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"LinkedCell"}]},pa:1024,mt:"a",nm:"iter"}},$m:{next:{$t:{comp:"u",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Finished"}]},pa:3,mt:"m",nm:"next"}},tp:[{nm:"Element"}],nm:"LinkedCellIterator"},largest:{$t:{md:"$",pk:"$",nm:"Integer"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"x"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"y"}]],mt:"m",nm:"largest"},ListMutator:{pa:1,sts:[{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Anything"}],nm:"List"}],mt:"i",$m:{add:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",an:{doc:["Add the given [[element]] to the end of this list,\nincrementing the [[length|List.size]] of the list."]},nm:"add"},infill:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{nm:"Element"},mt:"prm",an:{doc:["The replacement value"]},nm:"replacement"}]],$ff:1,mt:"m",an:{doc:["Replace all null values in this list with the given\n[[replacement value|replacement]]."]},nm:"infill"},move:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",an:{doc:["The source index of the element to move."]},nm:"i"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",an:{doc:["The destination index to which the element is\nmoved."]},nm:"j"}]],$ff:1,mt:"m",an:{doc:["Efficiently move the element of this list at the given \n[[source index|i]] to the given [[destination index|j]],\nshifting every element falling between the two given \nindices by one position to accommodate the change of\nposition. If the source index is larger than the \ndestination index, elements are shifted toward the end\nof the list. If the source index is smaller than the\ndestination index, elements are shifted toward the \nstart of the list. If the given indices are identical,\nno change is made to the list."],throws:["AssertionError","if either of the given indices is out of bounds"]},nm:"move"},set:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",an:{doc:["Replace the existing element at the specified [[index]]\nwith the given [[element]]."],throws:["AssertionError","if the given index is out of bounds, that\nis, if `index<0` or if `index>lastIndex`"]},nm:"set"},swap:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",an:{doc:["The index of the first element."]},nm:"i"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",an:{doc:["The index of the second element."]},nm:"j"}]],$ff:1,mt:"m",an:{doc:["Given two indices within this list, swap the positions \nof the elements at these indices. If the two given \nindices are identical, no change is made to the list."],throws:["AssertionError","if either of the given indices is out of bounds"]},nm:"swap"},replace:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",an:{doc:["The non-null value to replace"]},nm:"element"},{$t:{nm:"Element"},mt:"prm",an:{doc:["The replacement value"]},nm:"replacement"}]],$ff:1,mt:"m",an:{doc:["Replace all occurrences of the given [[value|element]]\nin this list with the given [[replacement\nvalue|replacement]].\n\nTo replace just one occurrence of the given value, use\n[[replaceFirst]] or [[replaceLast]]."]},nm:"replace"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,$ff:1,mt:"m",an:{doc:["Remove every element from this list, leaving an empty\nlist with no elements."]},nm:"clear"},deleteLast:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,mt:"m",an:{doc:["Remove the element with index `size-1` from this list,\nreturning the removed element, or `null` if there was\nno such element."]},nm:"deleteLast"},insert:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",an:{doc:["Insert the given [[element]] at the specified [[index]],\nincrementing the [[length|List.size]] of the list."],throws:["AssertionError","if the given index is out of bounds, that\nis, if `index<0` or if `index>lastIndex+1`"]},nm:"insert"},replaceFirst:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:5,ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",an:{doc:["The non-null value to replace"]},nm:"element"},{$t:{nm:"Element"},mt:"prm",an:{doc:["The replacement value"]},nm:"replacement"}]],mt:"m",an:{doc:["Replace the first occurrence of the given\n[[value|element]] in this list, if any, with the given\n[[replacement value|replacement]], returning `true` if\nthe value occurs in the list, or `false` otherwise."]},nm:"replaceFirst"},replaceLast:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:5,ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",an:{doc:["The non-null value to replace"]},nm:"element"},{$t:{nm:"Element"},mt:"prm",an:{doc:["The replacement value"]},nm:"replacement"}]],mt:"m",an:{doc:["Replace the last occurrence of the given\n[[value|element]] in this list, if any, with the given\n[[replacement value|replacement]], returning `true` if\nthe value occurs in the list, or `false` otherwise."]},nm:"replaceLast"},deleteMeasure:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],$ff:1,mt:"m",an:{doc:["Remove every element with an index in the measured\nrange `from:length`."]},nm:"deleteMeasure"},delete:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],mt:"m",an:{doc:["Remove the element at the specified [[index]],\nreturning the removed element, if any, or `null` if\nthere was no such element."]},nm:"delete"},removeLast:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:5,ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",an:{doc:["The non-null value to remove"]},nm:"element"}]],mt:"m",an:{doc:["Remove the last occurrence of the given\n[[value|element]] from this list, if any, returning\n`true` if the value occurs in the list, or `false`\notherwise."]},nm:"removeLast"},remove:{$t:{md:"$",pk:"$",nm:"Integer"},pa:5,ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",an:{doc:["The non-null value to remove"]},nm:"element"}]],mt:"m",an:{doc:["Remove all occurrences of the given [[value|element]]\nfrom this list, returning the number of elements \nremoved.\n\nTo remove just one occurrence of the given value, use\n[[removeFirst]] or [[removeLast]]."]},nm:"remove"},removeAll:{$t:{md:"$",pk:"$",nm:"Integer"},pa:9,ps:[[{$t:{md:"$",pk:"$",tp:[{comp:"i",mt:"tp",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",an:{doc:["The non-null values to remove"]},nm:"elements"}]],mt:"m",an:{doc:["Remove all occurrences of every one of the given\n[[values|elements]] from this list, returning the\nnumber of elements removed."]},nm:"removeAll"},truncate:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"size"}]],$ff:1,mt:"m",an:{doc:["Truncate this list to the given [[size]] by removing\nelements from the end of the list, if necessary,\nto leave a list with at most the given size."],throws:["AssertionError","if `size<0`"]},nm:"truncate"},addAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"elements"}]],$ff:1,mt:"m",an:{doc:["Add the given [[elements]] to the end of this list,\nincreasing the [[length|List.size]] of the list."]},nm:"addAll"},prune:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,$ff:1,mt:"m",an:{doc:["Remove all null elements from this list, leaving a list\nwith no null elements."]},nm:"prune"},removeFirst:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:5,ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",an:{doc:["The non-null value to remove"]},nm:"element"}]],mt:"m",an:{doc:["Remove the first occurrence of the given\n[[value|element]] from this list, if any, returning\n`true` if the value occurs in the list, or `false`\notherwise."]},nm:"removeFirst"},deleteFirst:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,mt:"m",an:{doc:["Remove the element with index `0` from this list,\nreturning the removed element, or `null` if there was\nno such element."]},nm:"deleteFirst"},deleteSpan:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"}]],$ff:1,mt:"m",an:{doc:["Remove every element with an index in the spanned range\n`from..to`."]},nm:"deleteSpan"},insertAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"elements"}]],$ff:1,mt:"m",an:{doc:["Insert the given [[elements]] at the specified \n[[index]], growing the [[length|List.size]] of the \nlist by the number of given elements."],throws:["AssertionError","if the given index is out of bounds, that\nis, if `index<0` or if `index>lastIndex+1`"]},nm:"insertAll"}},tp:[{dv:"in",nm:"Element"}],an:{see:["MutableList"],doc:["Protocol for mutation of a [[MutableList]]."]},nm:"ListMutator"},smallest:{$t:{md:"$",pk:"$",nm:"Integer"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"x"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"y"}]],mt:"m",nm:"smallest"},MapMutator:{pa:1,sts:[{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Object"},{mt:"tp",md:"$",pk:"$",nm:"Anything"}],nm:"Map"}],mt:"i",$m:{removeEntry:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:9,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{comp:"i",l:[{nm:"Item"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",an:{doc:["The item currently associated with the given [[key]]"]},nm:"item"}]],mt:"m",an:{doc:["Remove the entry associated with the given [[key]], if \nany, only if its item is equal to the given [[item]]. \nReturn [[true]] if an entry was removed, or [[false]] \notherwise."]},nm:"removeEntry"},removeAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"keys"}]],$ff:1,mt:"m",an:{doc:["Remove the entries associated with the given [[keys]], \nif any, from this map."]},nm:"removeAll"},replaceEntry:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:9,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{comp:"i",l:[{nm:"Item"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",an:{doc:["The item currently associated with the given [[key]]"]},nm:"item"},{$t:{nm:"Item"},mt:"prm",an:{doc:["The new item to associate with the given [[key]]"]},nm:"newItem"}]],mt:"m",an:{doc:["Modify the entry associated with the given [[key]], if \nany, setting its item to the given [[newItem]], only if \nthe its item is currently equal to the given [[item]]. \nReturn [[true]] if the item was replaced,or [[false]] \notherwise."]},nm:"replaceEntry"},putAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"entries"}]],$ff:1,mt:"m",an:{doc:["Add the given [[entries]] to this map, overwriting any \nexisting entries with the same keys."]},nm:"putAll"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,$ff:1,mt:"m",an:{doc:["Remove every entry from this map, leaving an empty map\nwith no entries."]},nm:"clear"},put:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{nm:"Item"},mt:"prm",nm:"item"}]],mt:"m",an:{doc:["Add an entry to this map, overwriting any existing \nentry for the given [[key]], and returning the previous \nvalue associated with the given `key`, if any, or \n`null` if no existing entry was overwritten."]},nm:"put"},remove:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],mt:"m",an:{doc:["Remove the entry associated with the given [[key]], if \nany, from this map, returning the value no longer \nassociated with the given `key`, if any, or `null` if\nthere was no entry associated with the given `key`."]},nm:"remove"}},tp:[{dv:"in",sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{dv:"in",nm:"Item"}],an:{see:["MutableMap"],doc:["Protocol for mutation of a [[MutableMap]]."]},nm:"MapMutator"},SortedSet:{pa:1,sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Set"},{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",nm:"Element"},{mt:"tp",pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"SortedSet"}],nm:"Ranged"}],mt:"i",$m:{ascendingElements:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:5,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"from"},{$t:{nm:"Element"},mt:"prm",nm:"to"}]],mt:"m",an:{doc:["The elements larger than or equal to the first given \n[[value|from]], and smaller than or equal to the second\ngiven [[value|to]], sorted in ascending order. \n\nThis is a lazy operation, returning a view of the \nunderlying sorted set."]},nm:"ascendingElements"},higherElements:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:5,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",an:{doc:["The elements larger than or equal to the given \n[[value|element]], sorted in ascending order. \n\nThis is a lazy operation, returning a view of the \nunderlying sorted set."]},nm:"higherElements"},lowerElements:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:5,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",an:{doc:["The elements smaller than or equal to the given \n[[value|element]], sorted _in descending order_. \n\nThis is a lazy operation, returning a view of the \nunderlying sorted set."]},nm:"lowerElements"},descendingElements:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:5,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"from"},{$t:{nm:"Element"},mt:"prm",nm:"to"}]],mt:"m",an:{doc:["The elements smaller than or equal to the first given \n[[value|from]], and larger than or equal to the second\ngiven [[value|to]], sorted _in descending order_. \n\nThis is a lazy operation, returning a view of the \nunderlying sorted set."]},nm:"descendingElements"}},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],an:{by:["Gavin King"],doc:["A [[Set]] that maintains its entries in sorted order."]},nm:"SortedSet"},SetMutator:{pa:1,sts:[{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Object"}],nm:"Set"}],mt:"i",$m:{add:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:5,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",an:{doc:["Add the given [[element]] to this set, returning `true`\nif the element was _not_ already a member of this set, \nor `false` otherwise."]},nm:"add"},removeAll:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:9,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"elements"}]],mt:"m",an:{doc:["Remove the given [[elements]] from this set, returning \n`true` if at least one element was previously a member \nof the set."]},nm:"removeAll"},addAll:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:9,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"elements"}]],mt:"m",an:{doc:["Add the given [[elements]] to this set, returning `true`\nif any of the given elements was _not_ already a member\nof this set, or `false` otherwise."]},nm:"addAll"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,$ff:1,mt:"m",an:{doc:["Remove every element from this set, leaving an empty\nset with no elements."]},nm:"clear"},remove:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:5,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",an:{doc:["Remove an [[element]] from this set, returning `true`\nif the element was previously a member of the set."]},nm:"remove"}},tp:[{dv:"in",sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],an:{see:["MutableSet"],doc:["Protocol for mutation of a [[MutableSet]]."]},nm:"SetMutator"},partition:{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Sequential"},{comp:"u",l:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Sequential"},{pk:".",nm:"Nothing"}]}]},{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Sequential"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Sequential"},{pk:".",nm:"Nothing"}]},{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Sequential"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Tuple"},pa:1,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"elements"},{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",an:{doc:["A predicate function that determines if a specified \nelement should be selected or rejected. Returns `true`\nto indicate that the element is selected, or `false`\nto indicate that the element is rejected."]},nm:"selecting",$hdn:1}]],mt:"m",$m:{selecting$1pd776:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",an:{doc:["A predicate function that determines if a specified \nelement should be selected or rejected. Returns `true`\nto indicate that the element is selected, or `false`\nto indicate that the element is rejected."]},nm:"selecting"}},tp:[{nm:"Element"}],an:{doc:["Groups the given [[elements]] into two sequences, the first \ncontaining elements selected by the given [[predicate \nfunction|selecting]], and the second containing elements \nrejected by the given predicate function."]},nm:"partition"},unmodifiableSet:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Set"},pa:1,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],an:{doc:["Wrap the given [[Set]], preventing attempts to narrow the\nreturned `Set` to [[MutableSet]]."]},nm:"unmodifiableSet"},UnmodifiableList:{super:{md:"$",pk:"$",nm:"Basic"},sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"}],ps:[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},mt:"prm",nm:"list"}],mt:"c",$at:{list$1bhyan:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},mt:"a",nm:"list"},rest:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},pa:3,mt:"g",nm:"rest"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"},lastIndex:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},pa:3,mt:"g",nm:"lastIndex"},first:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"first"},reversed:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},pa:3,mt:"g",nm:"reversed"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"}},$m:{spanTo:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"}]],mt:"m",nm:"spanTo"},iterator:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},spanFrom:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"}]],mt:"m",nm:"spanFrom"},measure:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],mt:"m",nm:"measure"},getFromFirst:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],mt:"m",nm:"getFromFirst"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],mt:"m",nm:"equals"},clone:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},pa:3,mt:"m",nm:"clone"},each:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"step"}]],$ff:1,mt:"m",nm:"each"},span:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"List"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"}]],mt:"m",nm:"span"}},tp:[{dv:"out",nm:"Element"}],an:{by:["Gavin King"],doc:["A wrapper class that exposes any [[List]] as unmodifiable, \nhiding the underlying `List` implementation from clients, \nand preventing attempts to narrow to [[MutableList]]."]},nm:"UnmodifiableList"},maximumCapacity:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"a",nm:"maximumCapacity"},IdentityMap:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"Collection"},{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Correspondence"}],ps:[{$t:{pk:".",nm:"Hashtable"},def:1,mt:"prm",an:{doc:["Performance-related settings for the backing array."]},nm:"hashtable",$hdn:1},{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial entries in the map."]},nm:"entries",$hdn:1}],mt:"c",$at:{entries$yyuq4k:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"a",an:{doc:["The initial entries in the map."]},nm:"entries"},store$dzug7v:{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"Cell"}]}],nm:"Array"},pa:1027,mt:"a",nm:"store"},length$bsbrj6:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1027,mt:"a",nm:"length"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"},hashtable$ysu1qs:{$t:{pk:".",nm:"Hashtable"},mt:"a",an:{doc:["Performance-related settings for the backing array."]},nm:"hashtable"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"}},$m:{removeEntry:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{comp:"i",l:[{nm:"Item"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"item"}]],mt:"m",nm:"removeEntry"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,$ff:1,mt:"m",an:{doc:["Removes every key\/value mapping"]},nm:"clear"},count:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"selecting"}]],mt:"m",$m:{selecting$jkdfqs:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},mt:"prm",nm:"element"}]],mt:"m",nm:"selecting"}},nm:"count"},storeIndex$9uf6gl:{$t:{md:"$",pk:"$",nm:"Integer"},ps:[[{$t:{md:"$",pk:"$",nm:"Identifiable"},mt:"prm",nm:"key"},{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"Cell"}]}],nm:"Array"},mt:"prm",nm:"store"}]],mt:"m",nm:"storeIndex"},put:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:1,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{nm:"Item"},mt:"prm",nm:"item"}]],mt:"m",nm:"put"},remove:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:1,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],mt:"m",an:{doc:["Removes a key\/value mapping if it exists"]},nm:"remove"},each:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"step"}]],$ff:1,mt:"m",$m:{step$zgi06k:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",nm:"step"}},nm:"each"},addToStore$z02azt:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"Cell"}]}],nm:"Array"},mt:"prm",nm:"store"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},mt:"prm",nm:"entry"}]],mt:"m",nm:"addToStore"},defines:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],mt:"m",nm:"defines"},checkRehash$c66hwt:{$t:{md:"$",pk:"$",nm:"Anything"},$ff:1,mt:"m",nm:"checkRehash"},removeAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"keys"}]],$ff:1,mt:"m",an:{doc:["Remove the entries associated with the given keys, \nif any, from this map"]},nm:"removeAll"},iterator:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"element"}]],mt:"m",nm:"contains"},replaceEntry:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{comp:"i",l:[{nm:"Item"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"item"},{$t:{nm:"Item"},mt:"prm",nm:"newItem"}]],mt:"m",nm:"replaceEntry"},putAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"entries"}]],$ff:1,mt:"m",an:{doc:["Adds a collection of key\/value mappings to this map, \nmay be used to change existing mappings"]},nm:"putAll"},get:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],mt:"m",nm:"get"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],mt:"m",nm:"equals"},clone:{$t:{pk:".",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"IdentityMap"},pa:3,mt:"m",nm:"clone"}},tp:[{sts:[{md:"$",pk:"$",nm:"Identifiable"}],nm:"Key"},{nm:"Item"}],an:{by:["Gavin King"],doc:["An identity map implemented as a hash map stored in an \n[[Array]] of singly linked lists of [[Entry]]s. The hash \ncode of a key is defined by [[identityHash]]. Note that an \n`IdentitySet` is not a [[Map]], since it does not obey the \nsemantics of a `Map`. In particular, it may contain \nmultiple keys which are equal, as determined by the `==` \noperator."]},nm:"IdentityMap"},Queue:{pa:1,mt:"i",$at:{back:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:5,mt:"a",an:{doc:["The element currently at the back of the \nqueue, or `null` if the queue is empty."]},nm:"back"},front:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:5,mt:"a",an:{doc:["The element currently at the front of the \nqueue, or `null` if the queue is empty."]},nm:"front"}},$m:{offer:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",an:{doc:["Add a new element to the back of the queue."]},nm:"offer"},accept:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:5,mt:"m",an:{doc:["Remove and return the element at the front \nof the queue."]},nm:"accept"}},tp:[{nm:"Element"}],an:{see:["LinkedList","ArrayList","Stack"],doc:["Abstract supertype of datastructures that can\nbe used as FIFO queues.\n\nA `Queue` has a well-defined [[front]] and\n[[back]]. Elements may be added to the back\nof the queue by [[offer]], and removed from\nthe front of the queue by [[accept]].\n\nNote that many `Queue`s are also [[List]]s, but \nthere is no defined relationship between the \norder of elements in the list and the direction \nof the queue. In particular, the front of the \nqueue may be first element of the list, or it \nmay be the last element of the list."]},nm:"Queue"},linked:{super:{pk:".",nm:"Stability"},pa:1,mt:"o",nm:"linked"},measureToSpan:{$t:{$t:{md:"$",pk:"$",nm:"Integer"},count:2,pk:"$",nm:"Tuple"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],mt:"m",an:{doc:["Converts the indexes of a measure to those of an equivalent \nspan."]},nm:"measureToSpan"},StoreIterator:{super:{md:"$",pk:"$",nm:"Basic"},sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Iterator"}],ps:[{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]}],nm:"Array"},mt:"prm",nm:"store"}],mt:"c",$at:{bucket$xzowap:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]},pa:1027,mt:"a",nm:"bucket"},store$ds37oi:{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]}],nm:"Array"},mt:"a",nm:"store"},index$e2or89:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1024,mt:"a",nm:"index"}},$m:{next:{$t:{comp:"u",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Finished"}]},pa:3,mt:"m",nm:"next"}},tp:[{nm:"Element"}],nm:"StoreIterator"},SingletonMap:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Map"}],ps:[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},pa:1,mt:"prm",nm:"entry"}],mt:"c",$at:{entry:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},pa:1,mt:"a",nm:"entry"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"}},$m:{contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"entry"}]],mt:"m",nm:"contains"},iterator:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},get:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"}]],mt:"m",nm:"get"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],mt:"m",nm:"equals"},clone:{$t:{pk:".",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"SingletonMap"},pa:3,mt:"m",nm:"clone"},each:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"step"}]],$ff:1,mt:"m",nm:"each"},defines:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"}]],mt:"m",nm:"defines"}},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{nm:"Item"}],an:{see:["SingletonSet","Singleton"],doc:["A [[Map]] with exactly one [[entry]]."]},nm:"SingletonMap"},SingletonSet:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Set"}],ps:[{$t:{nm:"Element"},pa:1,mt:"prm",nm:"element"}],mt:"c",$at:{hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},element:{$t:{nm:"Element"},pa:1,mt:"a",nm:"element"}},$m:{contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"element"}]],mt:"m",nm:"contains"},iterator:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},intersection:{$t:{md:"$",pk:"$",tp:[{comp:"i",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],nm:"Set"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Other"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],nm:"intersection"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],mt:"m",nm:"equals"},clone:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"SingletonSet"},pa:3,mt:"m",nm:"clone"},union:{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],nm:"Set"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Other"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],nm:"union"},complement:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Set"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Other"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],nm:"complement"},each:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"step"}]],$ff:1,mt:"m",nm:"each"},exclusiveUnion:{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],nm:"Set"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Other"}],nm:"Set"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],nm:"exclusiveUnion"}},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],an:{see:["SingletonMap","Singleton"],doc:["A [[Set]] with exactly one [[element]]."]},nm:"SingletonSet"},Hashtable:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,ps:[{$t:{md:"$",pk:"$",nm:"Integer"},pa:1,def:1,mt:"prm",an:{doc:["The initial capacity of the backing array."]},nm:"initialCapacity",$hdn:1},{$t:{md:"$",pk:"$",nm:"Float"},pa:1,def:1,mt:"prm",an:{doc:["The ratio between the number of elements and the \ncapacity which triggers a rebuild of the hash set."]},nm:"loadFactor",$hdn:1},{$t:{md:"$",pk:"$",nm:"Float"},pa:1,def:1,mt:"prm",an:{doc:["The factor used to determine the new size of the\nbacking array when a new backing array is allocated."]},nm:"growthFactor",$hdn:1}],mt:"c",$at:{loadFactor:{$t:{md:"$",pk:"$",nm:"Float"},pa:1,mt:"a",an:{doc:["The ratio between the number of elements and the \ncapacity which triggers a rebuild of the hash set."]},nm:"loadFactor"},growthFactor:{$t:{md:"$",pk:"$",nm:"Float"},pa:1,mt:"a",an:{doc:["The factor used to determine the new size of the\nbacking array when a new backing array is allocated."]},nm:"growthFactor"},initialCapacity:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1,mt:"a",an:{doc:["The initial capacity of the backing array."]},nm:"initialCapacity"}},$m:{initialCapacityForSize:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"size"}]],mt:"m",nm:"initialCapacityForSize"},rehash:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"capacity"}]],mt:"m",nm:"rehash"},initialCapacityForUnknownSize:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1,mt:"m",nm:"initialCapacityForUnknownSize"},powerOf2$bh7ri4:{$t:{md:"$",pk:"$",nm:"Integer"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"capacity"}]],mt:"m",nm:"powerOf2"},capacity:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1,ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],mt:"m",nm:"capacity"}},an:{doc:["Performance-related settings for a hashtable based \ncollection like [[HashMap]] or [[HashSet]].\n\nThe size of the backing [[Array]] is called the _capacity_\nof the hashtable.\n\n- The capacity of a new instance is specified by the given \n  [[initialCapacity]].\n- The capacity is increased, and the elements _rehashed_, \n  when the ratio of collection size to capacity exceeds the \n  given [[loadFactor]].\n- The new capacity is the product of the current capacity \n  and the given [[growthFactor]]."]},nm:"Hashtable"},IdentitySet:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Collection"}],ps:[{$t:{pk:".",nm:"Hashtable"},def:1,mt:"prm",an:{doc:["Performance-related settings for the backing array."]},nm:"hashtable",$hdn:1},{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial elements of the set."]},nm:"elements",$hdn:1}],mt:"c",$at:{length$8o5tco:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1027,mt:"a",nm:"length"},store$h40eed:{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]}],nm:"Array"},pa:1027,mt:"a",nm:"store"},hashtable$x4421u:{$t:{pk:".",nm:"Hashtable"},mt:"a",an:{doc:["Performance-related settings for the backing array."]},nm:"hashtable"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"},elements$7yiv9d:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"a",an:{doc:["The initial elements of the set."]},nm:"elements"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"}},$m:{add:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"add"},superset:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:9,ps:[[{$t:{pk:".",tp:[{mt:"tp",nm:"Other"}],nm:"IdentitySet"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Identifiable"}],nm:"Other"}],nm:"superset"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,$ff:1,mt:"m",an:{doc:["Removes every element"]},nm:"clear"},count:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"selecting"}]],mt:"m",$m:{selecting$1muhqi:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"selecting"}},nm:"count"},union:{$t:{pk:".",tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],nm:"IdentitySet"},pa:1,ps:[[{$t:{pk:".",tp:[{mt:"tp",nm:"Other"}],nm:"IdentitySet"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Identifiable"}],nm:"Other"}],nm:"union"},addToStore$vvwctb:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]}],nm:"Array"},mt:"prm",nm:"store"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"addToStore"},remove:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"m",nm:"remove"},each:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],mt:"prm",$pt:"f",nm:"step"}]],$ff:1,mt:"m",$m:{step$hiz26a:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],$ff:1,mt:"m",nm:"step"}},nm:"each"},exclusiveUnion:{$t:{pk:".",tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],nm:"IdentitySet"},pa:1,ps:[[{$t:{pk:".",tp:[{mt:"tp",nm:"Other"}],nm:"IdentitySet"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Identifiable"}],nm:"Other"}],nm:"exclusiveUnion"},removeAll:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"elements"}]],mt:"m",nm:"removeAll"},iterator:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"element"}]],mt:"m",nm:"contains"},addAll:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"elements"}]],mt:"m",nm:"addAll"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],mt:"m",nm:"equals"},intersection:{$t:{pk:".",tp:[{comp:"i",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],nm:"IdentitySet"},pa:1,ps:[[{$t:{pk:".",tp:[{mt:"tp",nm:"Other"}],nm:"IdentitySet"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Identifiable"}],nm:"Other"}],nm:"intersection"},clone:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"IdentitySet"},pa:3,mt:"m",nm:"clone"},checkRehash$920jqb:{$t:{md:"$",pk:"$",nm:"Anything"},$ff:1,mt:"m",nm:"checkRehash"},complement:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"IdentitySet"},pa:1,ps:[[{$t:{pk:".",tp:[{mt:"tp",nm:"Other"}],nm:"IdentitySet"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Identifiable"}],nm:"Other"}],nm:"complement"},storeIndex$6q98a3:{$t:{md:"$",pk:"$",nm:"Integer"},ps:[[{$t:{md:"$",pk:"$",nm:"Identifiable"},mt:"prm",nm:"elem"},{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]}],nm:"Array"},mt:"prm",nm:"store"}]],mt:"m",nm:"storeIndex"},subset:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:9,ps:[[{$t:{pk:".",tp:[{mt:"tp",nm:"Other"}],nm:"IdentitySet"},mt:"prm",nm:"set"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Identifiable"}],nm:"Other"}],nm:"subset"}},tp:[{sts:[{md:"$",pk:"$",nm:"Identifiable"}],nm:"Element"}],an:{by:["Gavin King"],doc:["An identity set implemented as a hash set stored in an \n[[Array]] of singly linked lists. The hash code of an \nelement is defined by [[identityHash]]. Note that an \n`IdentitySet` is not a [[Set]], since it does not obey the \nsemantics of a `Set`. In particular, it may contain \nmultiple elements which are equal, as determined by the\n`==` operator."]},nm:"IdentitySet"},naturalOrderTreeSet:{$t:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"TreeSet"},pa:1,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"entries"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Comparable"}],nm:"Element"}],an:{doc:["Create a [[TreeSet]] with [[comparable|Comparable]] keys,\nsorted by the natural ordering of the keys."]},nm:"naturalOrderTreeSet"},elementStore:{$t:{md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]}],nm:"Array"},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"size"}]],mt:"m",tp:[{nm:"Element"}],an:{doc:["Create a backing array for storing linked lists of hash set\nelements"]},nm:"elementStore"},TreeMap:{ps:[{$t:{md:"$",pk:"$",nm:"Comparison"},ps:[[{$t:{nm:"Key"},mt:"prm",nm:"x"},{$t:{nm:"Key"},mt:"prm",nm:"y"}]],mt:"prm",$pt:"f",an:{doc:["A comparator function used to sort the entries."]},nm:"compare"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial entries in the map."]},nm:"entries"}],mt:"c",$m:{removeEntry:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{comp:"i",l:[{nm:"Item"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"item"}]],mt:"m",nm:"removeEntry"},spanFrom:{$t:{pk:".",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"TreeMap"},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"from"}]],mt:"m",nm:"spanFrom"},getOrDefault:{$t:{comp:"u",l:[{nm:"Item"},{nm:"Default"}]},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"},{$t:{nm:"Default"},mt:"prm",nm:"default"}]],mt:"m",tp:[{nm:"Default"}],nm:"getOrDefault"},rotateLeft$bf2pku:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"}]],$ff:1,mt:"m",nm:"rotateLeft"},copyNode$paf63:{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"}]],mt:"m",nm:"copyNode"},replaceNode$sb7ik2:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"old"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},mt:"prm",nm:"node"}]],$ff:1,mt:"m",nm:"replaceNode"},assertBlackRoot$37b14f:{$t:{md:"$",pk:"$",nm:"Anything"},$ff:1,mt:"m",nm:"assertBlackRoot"},assertBlackNodesInPaths$9l267p:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},def:1,mt:"prm",nm:"node",$hdn:1},{$t:{md:"$",pk:"$",nm:"Integer"},pa:1024,def:1,mt:"prm",nm:"blackCount",$hdn:1},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},pa:1024,def:1,mt:"prm",nm:"pathBlackCount",$hdn:1}]],mt:"m",nm:"assertBlackNodesInPaths"},balanceAfterInsert$9owhr7:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"newNode"}]],$ff:1,mt:"m",nm:"balanceAfterInsert"},rotateRight$lztmmz:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"}]],$ff:1,mt:"m",nm:"rotateRight"},put:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{nm:"Item"},mt:"prm",nm:"item"}]],mt:"m",nm:"put"},remove:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],mt:"m",nm:"remove"},defines:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"}]],mt:"m",nm:"defines"},lowerEntries:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],mt:"m",nm:"lowerEntries"},ceiling$by99mn:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],mt:"m",nm:"ceiling"},iterator:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},higherEntries:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],mt:"m",nm:"higherEntries"},replaceEntry:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{comp:"i",l:[{nm:"Item"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"item"},{$t:{nm:"Item"},mt:"prm",nm:"newItem"}]],mt:"m",nm:"replaceEntry"},isRed$pt60u3:{$t:{md:"$",pk:"$",nm:"Boolean"},ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},mt:"prm",nm:"node"}]],mt:"m",nm:"isRed"},get:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"}]],mt:"m",nm:"get"},assertColors$bbyw4y:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},def:1,mt:"prm",nm:"node"}]],$ff:1,mt:"m",nm:"assertColors"},compare$l83nqh:{$t:{md:"$",pk:"$",nm:"Comparison"},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"x"},{$t:{nm:"Key"},mt:"prm",nm:"y"}]],mt:"m",an:{doc:["A comparator function used to sort the entries."]},nm:"compare"},assertInvariants:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,$ff:1,mt:"m",nm:"assertInvariants"},floor$u13blk:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],mt:"m",nm:"floor"},setLeftChild$7ba4nt:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},mt:"prm",nm:"left"}]],$ff:1,mt:"m",nm:"setLeftChild"},setRightChild$y2zjj6:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},mt:"prm",nm:"right"}]],$ff:1,mt:"m",nm:"setRightChild"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,$ff:1,mt:"m",nm:"clear"},ascendingEntries:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"from"},{$t:{nm:"Key"},mt:"prm",nm:"to"}]],mt:"m",nm:"ascendingEntries"},descendingEntries:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"from"},{$t:{nm:"Key"},mt:"prm",nm:"to"}]],mt:"m",nm:"descendingEntries"},spanTo:{$t:{pk:".",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"TreeMap"},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"to"}]],mt:"m",nm:"spanTo"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"entry"}]],mt:"m",nm:"contains"},measure:{$t:{pk:".",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"TreeMap"},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],mt:"m",nm:"measure"},lookup$pd1hl6:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],mt:"m",nm:"lookup"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],mt:"m",nm:"equals"},clone:{$t:{pk:".",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"TreeMap"},pa:3,mt:"m",nm:"clone"},span:{$t:{pk:".",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"TreeMap"},pa:3,ps:[[{$t:{nm:"Key"},mt:"prm",nm:"from"},{$t:{nm:"Key"},mt:"prm",nm:"to"}]],mt:"m",nm:"span"}},$o:{removeCases$osfi1e:{super:{md:"$",pk:"$",nm:"Basic"},mt:"o",$m:{case5$l9jkl6:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"},{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"p"},{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"s"},{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"sLeftRed"},{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"sRightRed"}]],$ff:1,mt:"m",nm:"case5"},getAndEnsureAtMostOneChild$j2uuc0:{$t:{comp:"u",l:[{pk:".",nm:"TreeMap.Node$7z3hge"},{md:"$",pk:"$",nm:"Null"}]},ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"}]],mt:"m",nm:"getAndEnsureAtMostOneChild"},removeNodeWithAtMostOneChild:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"}]],$ff:1,mt:"m",nm:"removeNodeWithAtMostOneChild"},case1$l9jgd2:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},mt:"prm",nm:"sibling"}]],$ff:1,mt:"m",nm:"case1"},case2$l9jhf3:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},mt:"prm",nm:"sibling"}]],$ff:1,mt:"m",nm:"case2"},case3$l9jih4:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"},{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"p"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},mt:"prm",nm:"s"}]],$ff:1,mt:"m",nm:"case3"},case4$l9jjj5:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"},{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"p"},{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"s"},{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"sLeftRed"},{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"sRightRed"}]],$ff:1,mt:"m",nm:"case4"},case6$l9jln7:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"},{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"p"},{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"s"}]],$ff:1,mt:"m",nm:"case6"}},an:{doc:["Possible cases when removing nodes with at most one child"]},nm:"removeCases"}},an:{see:["naturalOrderTreeMap"],by:["Gavin King"],doc:["A [[MutableMap]] implemented using a red\/black tree.\nEntries in the map are maintained in a sorted order, from\nsmallest to largest key, as determined by the given\n[[comparator function|compare]]."]},$cn:{$def:{pa:1,ps:[{$t:{md:"$",pk:"$",nm:"Comparison"},ps:[[{$t:{nm:"Key"},mt:"prm",nm:"x"},{$t:{nm:"Key"},mt:"prm",nm:"y"}]],mt:"prm",$pt:"f",an:{doc:["A comparator function used to sort the entries."]},nm:"compare"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial entries in the map."]},nm:"entries"}],$m:{compare$42111f:{$t:{md:"$",pk:"$",nm:"Comparison"},ps:[[{$t:{nm:"Key"},mt:"prm",nm:"x"},{$t:{nm:"Key"},mt:"prm",nm:"y"}]],mt:"m",an:{doc:["A comparator function used to sort the entries."]},nm:"compare"}},an:{doc:["Create a new `TreeMap` with the given \n[[comparator function|compare]] and [[entries]]."]}},copy:{pa:1,ps:[{$t:{pk:".",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"TreeMap"},mt:"prm",nm:"treeMap"}],an:{doc:["Create a new `TreeMap` with the same comparator \nfunction and entries as the given [[treeMap]]."]},nm:"copy"}},super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{pk:".",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"MutableMap"},{pk:".",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"SortedMap"},{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",pk:".",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"TreeMap"}],nm:"Ranged"}],$at:{entries$25gqqk:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},pa:3,mt:"a",an:{doc:["The initial entries in the map."]},nm:"entries"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"},last:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}]},pa:3,mt:"g",nm:"last"},string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",nm:"string"},root$w9iz1a:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1027,mt:"a",an:{doc:["The root node of the tree."]},nm:"root"},nodeToClone$bq245o:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:3,mt:"a",an:{doc:["Alternatively, a node to clone."]},nm:"nodeToClone"},first:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}]},pa:3,mt:"g",nm:"first"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"}},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{nm:"Item"}],nm:"TreeMap",$c:{Node$7z3hge:{super:{md:"$",pk:"$",nm:"Basic"},ps:[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{nm:"Item"},mt:"prm",nm:"item"},{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"red"}],mt:"c",$at:{onRight:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,mt:"g",nm:"onRight"},parent:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1025,mt:"a",nm:"parent"},item:{$t:{nm:"Item"},pa:1025,mt:"a",nm:"item"},string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",nm:"string"},uncle:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1,mt:"g",nm:"uncle"},right:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1025,mt:"a",nm:"right"},rightmostChild:{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},pa:1,mt:"g",nm:"rightmostChild"},red:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1025,mt:"a",nm:"red"},sibling:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1,mt:"g",nm:"sibling"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1,mt:"g",nm:"size"},left:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1025,mt:"a",nm:"left"},grandparent:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1,mt:"g",nm:"grandparent"},onLeft:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,mt:"g",nm:"onLeft"},leftmostChild:{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},pa:1,mt:"g",nm:"leftmostChild"},key:{$t:{nm:"Key"},pa:1025,mt:"a",nm:"key"}},nm:"Node$7z3hge",$cn:{$def:{pa:1,ps:[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{nm:"Item"},mt:"prm",nm:"item"},{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"red"}]}}},NodeIterator$6tiwsc:{super:{md:"$",pk:"$",nm:"Basic"},sts:[{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"Iterator"}],ps:[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1024,def:1,mt:"prm",nm:"current",$hdn:1}],mt:"c",$at:{current$5dq3a0:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1027,mt:"a",nm:"current"}},$m:{next:{$t:{comp:"u",l:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{md:"$",pk:"$",nm:"Finished"}]},pa:3,mt:"m",nm:"next"}},nm:"NodeIterator$6tiwsc"},ReverseNodeIterator$z6e966:{super:{md:"$",pk:"$",nm:"Basic"},sts:[{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"}],nm:"Iterator"}],ps:[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1024,def:1,mt:"prm",nm:"current",$hdn:1}],mt:"c",$at:{current$suzjhm:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1027,mt:"a",nm:"current"}},$m:{next:{$t:{comp:"u",l:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{md:"$",pk:"$",nm:"Finished"}]},pa:3,mt:"m",nm:"next"}},nm:"ReverseNodeIterator$z6e966"}}},LinkedCell:{super:{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"},ps:[{$t:{nm:"Element"},mt:"prm",nm:"car"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]},mt:"prm",nm:"cdr"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"LinkedCell"}]},pa:1025,mt:"prm",nm:"previous",$hdn:1}],mt:"c",$at:{next:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"LinkedCell"}]},pa:1025,mt:"a",nm:"next"},car$c10yed:{$t:{nm:"Element"},mt:"a",nm:"car"},previous:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"LinkedCell"}]},pa:1025,mt:"a",nm:"previous"},cdr$c13omy:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]},mt:"a",nm:"cdr"}},tp:[{nm:"Element"}],an:{doc:["Cell with two traversal modes:\n\n-[[rest]] for storage\n-[[next]]\/[[previous]] for stable iteration\n\nThis allows us to use the same cell object in two different lists which\nhave the same elements but different iteration order."]},nm:"LinkedCell"},naturalOrderTreeMap:{$t:{pk:".",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"TreeMap"},pa:1,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],nm:"Entry"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"entries"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Key"}],nm:"Comparable"}],nm:"Key"},{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Item"}],an:{doc:["Create a [[TreeMap]] with [[comparable|Comparable]] keys,\nsorted by the natural ordering of the keys."]},nm:"naturalOrderTreeMap"},unlinked:{super:{pk:".",nm:"Stability"},pa:1,mt:"o",nm:"unlinked"},CellIterator:{super:{md:"$",pk:"$",nm:"Basic"},sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Iterator"}],ps:[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]},pa:1024,mt:"prm",nm:"iter",$hdn:1}],mt:"c",$at:{iter$5t8f0a:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Element"}],nm:"Cell"}]},pa:1024,mt:"a",nm:"iter"}},$m:{next:{$t:{comp:"u",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Finished"}]},pa:3,mt:"m",nm:"next"}},tp:[{nm:"Element"}],nm:"CellIterator"},frequencies:{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Integer"}],nm:"Map"},pa:1,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",nm:"Null"}],nm:"Iterable"},mt:"prm",nm:"elements"}]],mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],an:{doc:["Produces a [[Map]] mapping elements to frequencies, where \neach entry maps a distinct member of the given iterable\n[[elements]] to the number of times it occurs among the \ngiven `elements`."]},nm:"frequencies"}},"$mod-name":"ceylon.collection"};
});
}(typeof define==='function' && define.amd ? define : function (factory) {
if (typeof exports!=='undefined') { factory(require, exports, module);
} else { throw 'no module loader'; }
}));
