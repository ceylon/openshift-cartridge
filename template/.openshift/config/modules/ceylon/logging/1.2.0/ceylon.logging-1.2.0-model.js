(function(define) { define(function(require, ex$, module) {
ex$.$CCMM$={"ceylon.logging":{Category:{pa:1,$alias:{comp:"u",l:[{md:"$",pk:"ceylon.language.meta.declaration",nm:"Module"},{md:"$",pk:"ceylon.language.meta.declaration",nm:"Package"}]},mt:"als",an:{see:["logger","Logger.category"],doc:["A topic to which a log message relates."]},nm:"Category"},debug:{super:{pk:".",nm:"Priority"},pa:1,mt:"o",an:{doc:["An event that is only interesting when debugging the \nprogram."]},nm:"debug"},"$pkg-pa":1,loggers:{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",md:"$",pk:"$",nm:"String"},{mt:"tp",pk:".",nm:"Logger"}],nm:"MutableMap"},mt:"a",nm:"loggers"},defaultPriority:{$t:{pk:".",nm:"Priority"},pa:1025,mt:"a",an:{doc:["The default [[Priority]] for newly created [[Logger]]s. \nThis priority is inherited by all other loggers which do \nnot have a priority explicitly assigned to \n[[Logger.priority]]."]},nm:"defaultPriority"},Priority:{super:{md:"$",pk:"$",nm:"Basic"},pa:257,sts:[{md:"$",pk:"$",tp:[{mt:"tp",pk:".",nm:"Priority"}],nm:"Comparable"}],ps:[{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"prm",an:{doc:["The name of this priority."]},nm:"string",$hdn:1},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",an:{doc:["An integer measuring the importance of this `Priority`."]},nm:"integer",$hdn:1}],mt:"c",of:[{pk:".",nm:"fatal"},{pk:".",nm:"error"},{pk:".",nm:"warn"},{pk:".",nm:"info"},{pk:".",nm:"debug"},{pk:".",nm:"trace"}],$at:{string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"a",an:{doc:["The name of this priority."]},nm:"string"},integer$cyjscj:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"a",an:{doc:["An integer measuring the importance of this `Priority`."]},nm:"integer"}},$m:{compare:{$t:{md:"$",pk:"$",nm:"Comparison"},pa:3,ps:[[{$t:{pk:".",nm:"Priority"},mt:"prm",nm:"other"}]],mt:"m",nm:"compare"}},an:{doc:["The importance of a log message. `Priority`s have a total\norder running from most important to least important."]},nm:"Priority"},logger:{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:".",nm:"Logger"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{pk:".",nm:"Category"},{pk:".",nm:"Nothing"}]},{mt:"tp",pk:".",nm:"Category"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},pa:1025,mt:"a",an:{doc:["Function to obtain a canonical [[Logger]] for the given \n[[Category]]. For each [[Category]], there is at most one \ninstance of `Logger`.\n\nAssigning a new function of type `Logger(Category)` to\n`logger` allows the program to specify a custom strategy \nfor `Logger` instantiation."]},nm:"logger"},LoggerImpl:{super:{md:"$",pk:"$",nm:"Basic"},sts:[{pk:".",nm:"Logger"}],ps:[{$t:{pk:".",nm:"Category"},pa:3,mt:"prm",nm:"category"}],mt:"c",$at:{explicitPriority$jm0rg3:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"Priority"}]},pa:1027,mt:"a",nm:"explicitPriority"},category:{$t:{pk:".",nm:"Category"},pa:3,mt:"a",nm:"category"},priority:{$t:{pk:".",nm:"Priority"},pa:1027,mt:"g",$set:{mt:"s"},nm:"priority"}},$m:{log:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{pk:".",nm:"Priority"},mt:"prm",nm:"priority"},{$t:{pk:".",nm:"Logger.Message"},mt:"prm",nm:"message"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Throwable"}]},def:1,mt:"prm",nm:"throwable"}]],$ff:1,mt:"m",nm:"log"}},nm:"LoggerImpl"},writeSimpleLog:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{pk:".",nm:"Priority"},mt:"prm",nm:"priority"},{$t:{pk:".",nm:"Category"},mt:"prm",nm:"category"},{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"message"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Throwable"}]},mt:"prm",nm:"throwable"}]],$ff:1,mt:"m",an:{doc:["A trivial [[log writer function|LogWriter]] that prints\nmessages with priority:\n\n- [[info]] or lower to [[standard out|process.write]], and \n- [[warn]] or higher to [[standard error|process.writeError]].\n\nThe format of the message is:\n\n`[milliseconds] PRIORITY message`\n\nThis log writer function must be registered explicitly by\ncalling:\n\n    addLogWriter(writeSimpleLog);"]},nm:"writeSimpleLog"},Logger:{pa:1,mt:"i",$at:{Message:{pa:1,$alias:{comp:"u",l:[{md:"$",pk:"$",nm:"String"},{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"String"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Callable"}]},mt:"als",an:{doc:["A log message, which may be a string or an unevaluated \nstring, represented by the function type `String()`."]},nm:"Message"},category:{$t:{pk:".",nm:"Category"},pa:5,mt:"a",an:{doc:["The [[topic|Category]] to which log messages sent by \nthis `Logger` relate."]},nm:"category"},priority:{$t:{pk:".",nm:"Priority"},pa:1029,mt:"a",an:{see:["defaultPriority","enabled"],doc:["The current priority of this `Logger`. If not \nexplicitly set, the [[default|defaultPriority]] \npriority is used."]},nm:"priority"}},$m:{warn:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{pk:".",nm:"Logger.Message"},mt:"prm",nm:"message"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Throwable"}]},def:1,mt:"prm",nm:"throwable"}]],$ff:1,mt:"m",an:{doc:["Send a [[ceylon.logging::warn]] log message."]},nm:"warn"},trace:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{pk:".",nm:"Logger.Message"},mt:"prm",nm:"message"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Throwable"}]},def:1,mt:"prm",nm:"throwable"}]],$ff:1,mt:"m",an:{doc:["Send a [[ceylon.logging::trace]] log message."]},nm:"trace"},debug:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{pk:".",nm:"Logger.Message"},mt:"prm",nm:"message"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Throwable"}]},def:1,mt:"prm",nm:"throwable"}]],$ff:1,mt:"m",an:{doc:["Send a [[ceylon.logging::debug]] log message."]},nm:"debug"},log:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{pk:".",nm:"Priority"},mt:"prm",nm:"priority"},{$t:{pk:".",nm:"Logger.Message"},mt:"prm",nm:"message"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Throwable"}]},def:1,mt:"prm",nm:"throwable"}]],$ff:1,mt:"m",an:{doc:["Send a log [[message]] with the given [[priority]].\nOptionally, a [[throwable]] may be given."]},nm:"log"},error:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{pk:".",nm:"Logger.Message"},mt:"prm",nm:"message"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Throwable"}]},def:1,mt:"prm",nm:"throwable"}]],$ff:1,mt:"m",an:{doc:["Send an [[ceylon.logging::error]] log message."]},nm:"error"},render:{$t:{md:"$",pk:"$",nm:"String"},pa:1,ps:[[{$t:{pk:".",nm:"Logger.Message"},mt:"prm",nm:"message"}]],mt:"m",an:{doc:["Evaluate the given message, producing a [[String]]."]},nm:"render"},enabled:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,ps:[[{$t:{pk:".",nm:"Priority"},mt:"prm",nm:"priority"}]],mt:"m",an:{doc:["Determines if log messages with the given priority will\nbe sent by this `Logger`. That is, if the given \npriority is at least as high as this `Logger`s\n[[current priority|Logger.priority]]."]},nm:"enabled"},fatal:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{pk:".",nm:"Logger.Message"},mt:"prm",nm:"message"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Throwable"}]},def:1,mt:"prm",nm:"throwable"}]],$ff:1,mt:"m",an:{doc:["Send a [[ceylon.logging::fatal]] log message."]},nm:"fatal"},info:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{pk:".",nm:"Logger.Message"},mt:"prm",nm:"message"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Throwable"}]},def:1,mt:"prm",nm:"throwable"}]],$ff:1,mt:"m",an:{doc:["Send an [[ceylon.logging::info]] log message."]},nm:"info"}},an:{see:["logger"],doc:["An object that sends log messages relating to a particular\n[[topic|category]]. A `Logger` instance for a [[Category]] \nmay be obtained by invoking [[logger]].\n\n    Logger log = logger(`module org.hibernate`);\n\nEach `Logger` has a [[priority]]. Log messages with a \npriority lower than the current priority of the `Logger` \nwill not be sent.\n\n    log.priority = warn;\n    log.info(\"hello\"); \/\/not sent\n    log.error(\"sos\"); \/\/sent"]},nm:"Logger"},error:{super:{pk:".",nm:"Priority"},pa:1,mt:"o",an:{doc:["An error, often causing the program to abandon its current \nwork."]},nm:"error"},addLogWriter:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{pk:".",nm:"LogWriter"},mt:"prm",nm:"log"}]],$ff:1,mt:"m",an:{doc:["Register a new [[log writer function|log]] with the logging\nsystem. Log messages are directed to all registered \n[[LogWriter]]s."]},nm:"addLogWriter"},fatal:{super:{pk:".",nm:"Priority"},pa:1,mt:"o",an:{doc:["A serious failure, usually leading to program termination."]},nm:"fatal"},warn:{super:{pk:".",nm:"Priority"},pa:1,mt:"o",an:{doc:["A warning, usually indicating that the program can continue\nwith its current work."]},nm:"warn"},trace:{super:{pk:".",nm:"Priority"},pa:1,mt:"o",an:{doc:["An event that is only interesting when the programmer is\npulling out hair while debugging the program."]},nm:"trace"},LogWriter:{pa:1,$alias:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Anything"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{pk:".",nm:"Priority"},{comp:"u",l:[{pk:".",nm:"Category"},{comp:"u",l:[{md:"$",pk:"$",nm:"String"},{comp:"u",l:[{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Throwable"}]},{pk:".",nm:"Nothing"}]}]}]}]},{mt:"tp",pk:".",nm:"Priority"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{pk:".",nm:"Category"},{comp:"u",l:[{md:"$",pk:"$",nm:"String"},{comp:"u",l:[{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Throwable"}]},{pk:".",nm:"Nothing"}]}]}]},{mt:"tp",pk:".",nm:"Category"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"String"},{comp:"u",l:[{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Throwable"}]},{pk:".",nm:"Nothing"}]}]},{mt:"tp",md:"$",pk:"$",nm:"String"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Throwable"}]},{pk:".",nm:"Nothing"}]},{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Throwable"}]},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Tuple"}],nm:"Tuple"}],nm:"Tuple"}],nm:"Callable"},mt:"als",an:{see:["addLogWriter"],doc:["A function capable of outputting log messages. `LogWriter`s\nare registered with the logging system by calling \n[[addLogWriter]]."]},nm:"LogWriter"},logWriters:{$t:{md:"ceylon.collection",pk:"ceylon.collection",tp:[{mt:"tp",pk:".",nm:"LogWriter"}],nm:"MutableList"},mt:"a",nm:"logWriters"},info:{super:{pk:".",nm:"Priority"},pa:1,mt:"o",an:{doc:["An important event in the program lifecycle."]},nm:"info"}},"$mod-version":"1.2.0","$mod-deps":["ceylon.language\/1.2.0","ceylon.collection\/1.2.0"],"$mod-bin":"8.0","$mod-anns":{doc:["Defines a platform-neutral API for writing log messages.\nThis module does not actually define any infrastructure\nfor log message output, so the program must register a\n[[LogWriter]] function at startup by calling \n[[addLogWriter]], passing a log writer function.\n\n    addLogWriter(writeSimpleLog);\n\n[[writeSimpleLog]] is a trivial log writer function that\nlogs information to standard out and warnings and errors \nto standard error. Your program will almost certainly \nneed to define its own log writer function that appends\nto a file, or whatever. \n\n_By default, no log writer function is registered, and so\nnothing is logged._\n\nLog messages are written to a [[Logger]]. A canonical \n`Logger` instance for a package or module may be obtained \nby calling [[logger]].\n\n    Logger log = logger(`module hello`);\n\nThe methods [[Logger.fatal]], [[Logger.error]], \n[[Logger.warn]], [[Logger.info]], [[Logger.debug]], and \n[[Logger.trace]] write log messages with various\n[[priorities|Priority]].\n\n    log.debug(\"trying to do something\");\n    try {\n        doSomething();\n    }\n    catch (e) {\n        log.error(\"something bad happened\", e);\n    }\n\nFor log messages with interpolated expressions, these\nmethods accept an anonymous function.\n  \n    log.debug(()=>\"trying to do ``something``\");\n    try {\n        do(something);\n    }\n    catch (e) {\n        log.error(()=>\"badness happened doing ``something``\", e);\n    }\n \nBy default, only log messages with priority at least \n[[info]] are sent to the `LogWriter` functions. To change\nthe minimum priority, assign to [[defaultPriority]].\n\n    defaultPriority = debug;\n\nAlternatively, we can assign an explicit priority to a\nspecific `Logger` by assigning to [[Logger.priority]].\n\n    logger(`module hello`).priority = debug;\n\nIt's easy to customize the output by writing your own\n[[log writer function|LogWriter]]. For example, we can\nuse `ceylon.time` and `ceylon.locale` to obtain a nicely\nformatter time and date:\n\n    import ceylon.logging { ... }\n    import ceylon.time { now }\n    import ceylon.locale { systemLocale }\n    \n    ...\n    \n    addLogWriter {\n        void log(Priority p, Category c, String m, Throwable? t) {\n            value print \n                    = p <= info \n                    then process.write\n                    else process.writeError;\n            value instant = now();\n            value formats = systemLocale.formats;\n            value date = \n                    formats.shortFormatDate(instant.date());\n            value time = \n                    formats.mediumFormatTime(instant.time());\n            print(\"[``date`` at ``time``] ``p.string``: ``m``\");\n            print(operatingSystem.newline);\n            if (exists t) {\n                printStackTrace(t, print);\n            }\n        }\n    };\n\nOr, to log to a file, using `ceylon.file`:\n\n    import ceylon.logging { ... }\n    import ceylon.file { ... }\n\n    File file;\n    switch (resource = parsePath(\"log.txt\").resource)\n    case (is ExistingResource) {\n        assert (is File resource);\n        file = resource;\n    }\n    case (is Nil) {\n        file = resource.createFile();\n    }\n    \n    addLogWriter {\n        void log(Priority p, Category c, String m, Throwable? t) {\n            try (appender = file.Appender()) {\n                appender.writeLine(\"[``system.milliseconds``] ``p.string``: ``m``\");\n                if (exists t) {\n                    printStackTrace(t, appender.write);\n                }\n            }\n        }\n    };\n\nFor integration with other logging libraries, it is\npossible to completely replace the [[logger]] function\nwith a custom function for producing `Logger`s.\n\n    logger = (Category category)\n        => JDKLoggerImpl(JDKLogger.getLogger(category.qualifiedName));"]},"$mod-name":"ceylon.logging"};
});
}(typeof define==='function' && define.amd ? define : function (factory) {
if (typeof exports!=='undefined') { factory(require, exports, module);
} else { throw 'no module loader'; }
}));
