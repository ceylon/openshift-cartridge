(function(define) { define(function(require, ex$, module) {
ex$.$CCMM$={"$mod-version":"1.2.0","ceylon.promise":{rethrow:{$t:{pk:".",nm:"Nothing"},ps:[[{$t:{md:"$",pk:"$",nm:"Throwable"},mt:"prm",nm:"e"}]],mt:"m",an:{by:["Julien Viet"]},nm:"rethrow"},Completable:{pa:1,mt:"i",$m:{fulfill:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{comp:"u",l:[{nm:"Value"},{pk:".",tp:[{mt:"tp",nm:"Value"}],nm:"Promise"}]},mt:"prm",nm:"val"}]],$ff:1,mt:"m",an:{doc:["Fulfills the promise with a value or a promise to the \nvalue."]},nm:"fulfill"},reject:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{md:"$",pk:"$",nm:"Throwable"},mt:"prm",nm:"reason"}]],$ff:1,mt:"m",an:{doc:["Rejects the promise with a reason."]},nm:"reject"},complete:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{comp:"u",l:[{nm:"Value"},{pk:".",tp:[{mt:"tp",nm:"Value"}],nm:"Promise"},{md:"$",pk:"$",nm:"Throwable"}]},mt:"prm",nm:"val"}]],$ff:1,mt:"m",an:{doc:["Complete the promise: either fulfill or reject it"]},nm:"complete"}},tp:[{dv:"in",nm:"Value"}],an:{by:["Julien Viet"],doc:["Something that can go through a transition and is meant to \nbe be completed, i.e either fulfilled or rejected."]},nm:"Completable"},"$pkg-pa":1,Deferred:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,sts:[{pk:".",tp:[{mt:"tp",nm:"Value"}],nm:"Completable"},{pk:".",tp:[{mt:"tp",nm:"Value"}],nm:"Promised"}],ps:[{$t:{pk:".",nm:"ExecutionContext"},def:1,mt:"prm",an:{doc:["The current context"]},nm:"context",$hdn:1}],mt:"c",$at:{state$7silgn:{$t:{pk:"ceylon.promise.internal",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"Deferred.State$m0vuux"}]}],nm:"AtomicRef"},mt:"a",an:{doc:["The current state"]},nm:"state"},context$tw7s7p:{$t:{pk:".",nm:"ExecutionContext"},mt:"a",an:{doc:["The current context"]},nm:"context"}},$m:{update$hzef6p:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{pk:".",tp:[{mt:"tp",nm:"Value"}],nm:"Promise"},mt:"prm",nm:"promise"}]],$ff:1,mt:"m",nm:"update"},fulfill:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{comp:"u",l:[{nm:"Value"},{pk:".",tp:[{mt:"tp",nm:"Value"}],nm:"Promise"}]},mt:"prm",nm:"val"}]],$ff:1,mt:"m",nm:"fulfill"},reject:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Throwable"},mt:"prm",nm:"reason"}]],$ff:1,mt:"m",nm:"reject"}},$o:{promise:{super:{pk:".",tp:[{mt:"tp",nm:"Value"}],nm:"Promise"},pa:3,mt:"o",$at:{context:{$t:{pk:".",nm:"ExecutionContext"},pa:3,mt:"g",nm:"context"}},$m:{flatMap:{$t:{pk:".",tp:[{mt:"tp",nm:"Result"}],nm:"Promise"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:".",tp:[{mt:"tp",nm:"Result"}],nm:"Promise"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"Value"},{pk:".",nm:"Nothing"}]},{mt:"tp",nm:"Value"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},mt:"prm",nm:"onFulfilled"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:".",tp:[{mt:"tp",nm:"Result"}],nm:"Promise"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Throwable"},{pk:".",nm:"Nothing"}]},{mt:"tp",md:"$",pk:"$",nm:"Throwable"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},def:1,mt:"prm",nm:"onRejected"}]],mt:"m",$m:{callback$6bx7hx:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:".",tp:[{mt:"tp",nm:"Result"}],nm:"Promise"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"T"},{pk:".",nm:"Nothing"}]},{mt:"tp",nm:"T"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},mt:"prm",nm:"on"},{$t:{nm:"T"},mt:"prm",nm:"val"}]],$ff:1,mt:"m",tp:[{nm:"T"}],nm:"callback"}},tp:[{nm:"Result"}],nm:"flatMap"},foobar$3evywg:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{nm:"Value"},mt:"prm",nm:"val"}]],mt:"prm",$pt:"f",nm:"onFulfilledCallback"},{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",nm:"Throwable"},mt:"prm",nm:"reason"}]],mt:"prm",$pt:"f",nm:"onRejectedCallback"}]],$ff:1,mt:"m",$m:{onRejectedCallback$97ck37:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",nm:"Throwable"},mt:"prm",nm:"reason"}]],$ff:1,mt:"m",nm:"onRejectedCallback"},onFulfilledCallback$ky1brs:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{nm:"Value"},mt:"prm",nm:"val"}]],$ff:1,mt:"m",nm:"onFulfilledCallback"}},nm:"foobar"},map:{$t:{pk:".",tp:[{mt:"tp",nm:"Result"}],nm:"Promise"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Result"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"Value"},{pk:".",nm:"Nothing"}]},{mt:"tp",nm:"Value"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},mt:"prm",nm:"onFulfilled"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Result"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Throwable"},{pk:".",nm:"Nothing"}]},{mt:"tp",md:"$",pk:"$",nm:"Throwable"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},def:1,mt:"prm",nm:"onRejected"}]],mt:"m",$m:{callback$pmlqpg:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Result"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"T"},{pk:".",nm:"Nothing"}]},{mt:"tp",nm:"T"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},mt:"prm",nm:"on"},{$t:{nm:"T"},mt:"prm",nm:"val"}]],$ff:1,mt:"m",tp:[{nm:"T"}],nm:"callback"}},tp:[{nm:"Result"}],nm:"map"}},an:{doc:["The promise of this deferred."]},nm:"promise"}},tp:[{nm:"Value"}],an:{by:["Julien Viet"],doc:["The deferred class is the primary implementation of the \n[[Promise]] interface.\n \nThe promise is accessible using the `promise` attribute of \nthe deferred.\n \nThe deferred can either be fulfilled or rejected via the \n[[Completable.fulfill]] or [[Completable.reject]] methods. Both \nmethods accept an argument or a promise to the argument, \nallowing the deferred to react on a promise."]},nm:"Deferred",$c:{PromiseState$x87nac:{super:{pk:".",nm:"Deferred.State$m0vuux"},ps:[{$t:{pk:".",tp:[{mt:"tp",nm:"Value"}],nm:"Promise"},pa:1,mt:"prm",nm:"promise"}],mt:"c",$at:{promise:{$t:{pk:".",tp:[{mt:"tp",nm:"Value"}],nm:"Promise"},pa:1,mt:"a",nm:"promise"}},nm:"PromiseState$x87nac"},ListenerState$hm3npv:{super:{pk:".",nm:"Deferred.State$m0vuux"},ps:[{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Anything"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"Value"},{pk:".",nm:"Nothing"}]},{mt:"tp",nm:"Value"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},mt:"prm",nm:"onFulfilled",$hdn:1},{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Anything"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Throwable"},{pk:".",nm:"Nothing"}]},{mt:"tp",md:"$",pk:"$",nm:"Throwable"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},mt:"prm",nm:"onRejected",$hdn:1},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"Deferred.ListenerState$hm3npv"}]},def:1,mt:"prm",nm:"previous"}],mt:"c",$at:{onFulfilled$m8dcku:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Anything"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"Value"},{pk:".",nm:"Nothing"}]},{mt:"tp",nm:"Value"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},mt:"a",nm:"onFulfilled"},onRejected$z8sdb7:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Anything"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Throwable"},{pk:".",nm:"Nothing"}]},{mt:"tp",md:"$",pk:"$",nm:"Throwable"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},mt:"a",nm:"onRejected"},previous$x7f1v7:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"Deferred.ListenerState$hm3npv"}]},mt:"a",nm:"previous"}},$m:{update:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{pk:".",tp:[{mt:"tp",nm:"Value"}],nm:"Promise"},mt:"prm",nm:"promise"}]],$ff:1,mt:"m",nm:"update"}},nm:"ListenerState$hm3npv"},State$m0vuux:{super:{md:"$",pk:"$",nm:"Basic"},pa:256,mt:"c",of:[{pk:".",nm:"Deferred.ListenerState$hm3npv"},{pk:".",nm:"Deferred.PromiseState$x87nac"}],nm:"State$m0vuux"}}},globalExecutionContext:{$t:{pk:".",nm:"ExecutionContext"},pa:1,mt:"g",an:{doc:["The global execution context for running promise \ncompositions when no execution context is explicitly used"]},nm:"globalExecutionContext"},addGlobalExecutionListener:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Anything"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Callable"},pa:1,ps:[[{$t:{pk:".",nm:"ExecutionListener"},mt:"prm",nm:"onChild"}]],mt:"m",$m:{remove$fn7r6o:{$t:{md:"$",pk:"$",nm:"Anything"},$ff:1,mt:"m",nm:"remove"}},an:{doc:["Add a global execution listener that will be used when composing promises. The execution\nlistener is invoked at composition time and returns a function that will wrap a later\nexecution of the composed function.\n\nThis function returns a function that when called removes the global execution listener.\n"]},nm:"addGlobalExecutionListener"},defineGlobalExecutionContext:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{pk:".",nm:"ExecutionContext"},mt:"prm",nm:"context"}]],$ff:1,mt:"m",an:{doc:["Define the global execution context for running deferred \ncompositions"]},nm:"defineGlobalExecutionContext"},ExecutionListener:{pa:1,mt:"i",$m:{onChild:{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Anything"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Anything"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Callable"},{pk:".",nm:"Nothing"}]},{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Anything"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Callable"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},pa:5,mt:"m",an:{doc:["This method is invoked when a child is created so it can capture the context of the creation of the promise's child.\nThe returned function can then apply this context on its children."]},nm:"onChild"}},nm:"ExecutionListener"},currentExecutionContext:{$t:{pk:"ceylon.promise.internal",tp:[{mt:"tp",pk:".",nm:"ExecutionContext"}],nm:"AtomicRef"},mt:"a",nm:"currentExecutionContext"},Promise:{super:{md:"$",pk:"$",nm:"Basic"},pa:257,sts:[{pk:".",tp:[{mt:"tp",nm:"Value"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"Value"},{pk:".",nm:"Nothing"}]},{mt:"tp",nm:"Value"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Completion"}],mt:"c",$at:{conjunction$co33sw:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",tp:[{mt:"tp",nm:"Value"},{mt:"tp",nm:"Value"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Conjunction"}]},pa:1024,mt:"a",nm:"conjunction"},context:{$t:{pk:".",nm:"ExecutionContext"},pa:5,mt:"a",an:{doc:["The context of this promise"]},nm:"context"},promise:{$t:{pk:".",tp:[{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"Value"},{pk:".",nm:"Nothing"}]},{mt:"tp",nm:"Value"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Promise"},pa:3,mt:"g",nm:"promise"}},$m:{flatMap:{$t:{pk:".",tp:[{mt:"tp",nm:"Result"}],nm:"Promise"},pa:7,ps:[[{$t:{pk:".",tp:[{mt:"tp",nm:"Result"}],nm:"Promise"},ps:[[{$t:{nm:"Value"},mt:"prm",nm:"val"}]],mt:"prm",$pt:"f",nm:"onFulfilled"},{$t:{pk:".",tp:[{mt:"tp",nm:"Result"}],nm:"Promise"},ps:[[{$t:{md:"$",pk:"$",nm:"Throwable"},mt:"prm",nm:"reason"}]],def:1,mt:"prm",$pt:"f",nm:"onRejected"}]],mt:"m",tp:[{nm:"Result"}],nm:"flatMap"},and:{$t:{pk:".",tp:[{comp:"u",mt:"tp",l:[{nm:"Value"},{nm:"Other"}]},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"Value"},{nm:"Other"}]},{mt:"tp",nm:"Other"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"Value"},{pk:".",nm:"Nothing"}]},{mt:"tp",nm:"Value"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Tuple"}],nm:"Completion"},pa:3,ps:[[{$t:{pk:".",tp:[{mt:"tp",nm:"Other"}],nm:"Promise"},mt:"prm",nm:"other"}]],mt:"m",tp:[{nm:"Other"}],nm:"and"},onComplete:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{comp:"u",l:[{nm:"Value"},{md:"$",pk:"$",nm:"Throwable"}]},mt:"prm",nm:"completion"}]],mt:"prm",$pt:"f",an:{doc:["A function that accepts either the promised value\nor a [[Throwable]] as completion."]},nm:"completed"}]],$ff:1,mt:"m",an:{doc:["Callback when the promise is completed with a function that accepts\neither a [[Value]] or a [[Throwable]]."]},nm:"onComplete"},completed:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{nm:"Value"},mt:"prm",nm:"val"}]],mt:"prm",$pt:"f",nm:"onFulfilled"},{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",nm:"Throwable"},mt:"prm",nm:"reason"}]],def:1,mt:"prm",$pt:"f",nm:"onRejected"}]],$ff:1,mt:"m",nm:"completed"},conj$wmrssi:{$t:{pk:".",tp:[{mt:"tp",nm:"Value"},{mt:"tp",nm:"Value"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Conjunction"},mt:"m",nm:"conj"},map:{$t:{pk:".",tp:[{mt:"tp",nm:"Result"}],nm:"Promise"},pa:7,ps:[[{$t:{nm:"Result"},ps:[[{$t:{nm:"Value"},mt:"prm",nm:"val"}]],mt:"prm",$pt:"f",nm:"onFulfilled"},{$t:{nm:"Result"},ps:[[{$t:{md:"$",pk:"$",nm:"Throwable"},mt:"prm",nm:"reason"}]],def:1,mt:"prm",$pt:"f",nm:"onRejected"}]],mt:"m",tp:[{nm:"Result"}],nm:"map"}},tp:[{dv:"out",nm:"Value"}],an:{by:["Julien Viet"],doc:["A promise represents a value that may not be available yet. \nThe primary method for interacting with a promise is its \n[[map]] method. A promise is a [[Completion]] element\nrestricted to a single value."]},nm:"Promise"},Completion:{pa:1,sts:[{pk:".",tp:[{mt:"tp",nm:"T"}],nm:"Promised"}],mt:"i",$m:{flatMap:{$t:{pk:".",tp:[{mt:"tp",nm:"Result"}],nm:"Promise"},pa:5,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:".",tp:[{mt:"tp",nm:"Result"}],nm:"Promise"},{mt:"tp",nm:"T"}],nm:"Callable"},mt:"prm",an:{doc:["A function that is called when fulfilled."]},nm:"onFulfilled"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:".",tp:[{mt:"tp",nm:"Result"}],nm:"Promise"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Throwable"},{pk:".",nm:"Nothing"}]},{mt:"tp",md:"$",pk:"$",nm:"Throwable"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},def:1,mt:"prm",an:{doc:["A function that is called when rejected."]},nm:"onRejected"}]],mt:"m",tp:[{nm:"Result"}],an:{doc:["Compose and return a [[Promise]]"]},nm:"flatMap"},and:{$t:{pk:".",tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]},{mt:"tp",nm:"Other"},{mt:"tp",nm:"T"}],nm:"Tuple"}],nm:"Completion"},pa:5,ps:[[{$t:{pk:".",tp:[{mt:"tp",nm:"Other"}],nm:"Promise"},mt:"prm",nm:"other"}]],mt:"m",tp:[{nm:"Other"}],an:{doc:["Combine the current completion with a provided promise and \nreturn a new completion object that\n\n- fulfills when both the current completion and the other \n  promise are fulfilled, and\n- rejects when either the current completion or the other \n  promise is rejected.\n\nThe `Completion`'s promise will be\n\n- fulfilled with a tuple of values of the original \n  promise (it is important to notice that tuple \n  elements are in reverse order of the and chain), or\n- rejected with the reason of the rejected promise.\n\nThe `Completion` object allows for promise chaining as a \nfluent API:\n\n    Promise<String> p1 = ...\n    Promise<Integer> p2 = ...\n    Promise<Boolean> p3 = ...\n    p1.and(p2, p3)\n      .compose((Boolean b, Integer i, String s) \n                => doSomething(b, i, s));"]},nm:"and"},completed:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Anything"},{mt:"tp",nm:"T"}],nm:"Callable"},mt:"prm",an:{doc:["A function that is called when fulfilled."]},nm:"onFulfilled"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",md:"$",pk:"$",nm:"Anything"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Throwable"},{pk:".",nm:"Nothing"}]},{mt:"tp",md:"$",pk:"$",nm:"Throwable"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},def:1,mt:"prm",an:{doc:["A function that is called when rejected."]},nm:"onRejected"}]],$ff:1,mt:"m",an:{doc:["When completion happens, the provided function will be \ninvoked."]},nm:"completed"},map:{$t:{pk:".",tp:[{mt:"tp",nm:"Result"}],nm:"Promise"},pa:5,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Result"},{mt:"tp",nm:"T"}],nm:"Callable"},mt:"prm",an:{doc:["A function that is called when fulfilled."]},nm:"onFulfilled"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Result"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Throwable"},{pk:".",nm:"Nothing"}]},{mt:"tp",md:"$",pk:"$",nm:"Throwable"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},def:1,mt:"prm",an:{doc:["A function that is called when rejected."]},nm:"onRejected"}]],mt:"m",tp:[{nm:"Result"}],an:{doc:["Compose and return a [[Promise]] with map functions"]},nm:"map"}},tp:[{dv:"out",nm:"Element"},{dv:"out",sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Sequential"}],nm:"T"}],an:{by:["Julien Viet"],doc:["Completion provides base support for promises and their composition. This interface\nsatisfies the [[Promised]] interface, to be used when a [[Promise]] is needed"]},nm:"Completion"},ExecutionContext:{pa:1,mt:"i",$m:{deferred:{$t:{pk:".",tp:[{mt:"tp",nm:"Value"}],nm:"Deferred"},pa:1,mt:"m",tp:[{nm:"Value"}],an:{doc:["Create a new deferred running on this context"]},nm:"deferred"},fulfilledPromise:{$t:{pk:".",tp:[{mt:"tp",nm:"T"}],nm:"Promise"},pa:1,ps:[[{$t:{nm:"T"},mt:"prm",nm:"val"}]],mt:"m",tp:[{nm:"T"}],an:{doc:["Create a new fulfilled promise running on this context"]},nm:"fulfilledPromise"},rejectedPromise:{$t:{pk:".",tp:[{mt:"tp",nm:"T"}],nm:"Promise"},pa:1,ps:[[{$t:{md:"$",pk:"$",nm:"Throwable"},mt:"prm",nm:"reason"}]],mt:"m",tp:[{nm:"T"}],an:{doc:["Create a new rejected promise running on this context"]},nm:"rejectedPromise"},run:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",$pt:"f",nm:"task"}]],$ff:1,mt:"m",nm:"run"},childContext:{$t:{pk:".",nm:"ExecutionContext"},pa:5,mt:"m",nm:"childContext"}},an:{by:["Julien Viet"],doc:["The execution context"]},nm:"ExecutionContext"},currentExecutionListeners:{$t:{pk:"ceylon.promise.internal",tp:[{mt:"tp",md:"$",pk:"$",tp:[{mt:"tp",pk:".",nm:"ExecutionListener"}],nm:"Sequential"}],nm:"AtomicRef"},mt:"a",nm:"currentExecutionListeners"},Promised:{pa:1,mt:"i",$at:{promise:{$t:{pk:".",tp:[{mt:"tp",nm:"Value"}],nm:"Promise"},pa:5,mt:"a",an:{doc:["The promise."]},nm:"promise"}},tp:[{dv:"out",nm:"Value"}],an:{by:["Julien Viet"],doc:["An object that provides a [[promise]]."]},nm:"Promised"},Conjunction:{super:{md:"$",pk:"$",nm:"Basic"},sts:[{pk:".",tp:[{mt:"tp",nm:"Element"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"First"},{nm:"Element"}]},{mt:"tp",nm:"First"},{mt:"tp",nm:"Rest"}],nm:"Tuple"}],nm:"Completion"}],ps:[{$t:{pk:".",tp:[{mt:"tp",nm:"First"}],nm:"Promise"},mt:"prm",an:{doc:["The second promise."]},nm:"first",$hdn:1},{$t:{pk:".",tp:[{mt:"tp",nm:"Rest"}],nm:"Promise"},mt:"prm",an:{doc:["The first promise."]},nm:"rest",$hdn:1}],mt:"c",$at:{first$cutmjn:{$t:{pk:".",tp:[{mt:"tp",nm:"First"}],nm:"Promise"},mt:"a",an:{doc:["The second promise."]},nm:"first"},deferred$jcmj90:{$t:{pk:".",tp:[{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"First"},{nm:"Element"}]},{mt:"tp",nm:"First"},{mt:"tp",nm:"Rest"}],nm:"Tuple"}],nm:"Deferred"},mt:"a",nm:"deferred"},promise:{$t:{pk:".",tp:[{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"First"},{nm:"Element"}]},{mt:"tp",nm:"First"},{mt:"tp",nm:"Rest"}],nm:"Tuple"}],nm:"Promise"},pa:3,mt:"a",nm:"promise"},rest$8vq6sf:{$t:{pk:".",tp:[{mt:"tp",nm:"Rest"}],nm:"Promise"},mt:"a",an:{doc:["The first promise."]},nm:"rest"},firstVal$yc995i:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"First"}]},pa:1027,mt:"a",nm:"firstVal"},restVal$tpulim:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Rest"}]},pa:1027,mt:"a",nm:"restVal"}},$m:{flatMap:{$t:{pk:".",tp:[{mt:"tp",nm:"Result"}],nm:"Promise"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:".",tp:[{mt:"tp",nm:"Result"}],nm:"Promise"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"First"},{nm:"Element"}]},{mt:"tp",nm:"First"},{mt:"tp",nm:"Rest"}],nm:"Tuple"}],nm:"Callable"},mt:"prm",nm:"onFulfilled"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",pk:".",tp:[{mt:"tp",nm:"Result"}],nm:"Promise"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Throwable"},{pk:".",nm:"Nothing"}]},{mt:"tp",md:"$",pk:"$",nm:"Throwable"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},def:1,mt:"prm",nm:"onRejected"}]],mt:"m",tp:[{nm:"Result"}],nm:"flatMap"},onFirstFulfilled$1ghnlh:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{nm:"First"},mt:"prm",nm:"val"}]],$ff:1,mt:"m",nm:"onFirstFulfilled"},onRestFulfilled$7ns3mv:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{nm:"Rest"},mt:"prm",nm:"val"}]],$ff:1,mt:"m",nm:"onRestFulfilled"},and:{$t:{pk:".",tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]},{mt:"tp",nm:"Other"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"First"},{nm:"Element"}]},{mt:"tp",nm:"First"},{mt:"tp",nm:"Rest"}],nm:"Tuple"}],nm:"Tuple"}],nm:"Completion"},pa:3,ps:[[{$t:{pk:".",tp:[{mt:"tp",nm:"Other"}],nm:"Promise"},mt:"prm",nm:"other"}]],mt:"m",tp:[{nm:"Other"}],nm:"and"},onReject$lunxnf:{$t:{md:"$",pk:"$",nm:"Anything"},ps:[[{$t:{md:"$",pk:"$",nm:"Throwable"},mt:"prm",nm:"e"}]],$ff:1,mt:"m",nm:"onReject"},map:{$t:{pk:".",tp:[{mt:"tp",nm:"Result"}],nm:"Promise"},pa:3,ps:[[{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Result"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"First"},{nm:"Element"}]},{mt:"tp",nm:"First"},{mt:"tp",nm:"Rest"}],nm:"Tuple"}],nm:"Callable"},mt:"prm",nm:"onFulfilled"},{$t:{md:"$",pk:"$",tp:[{mt:"tp",nm:"Result"},{mt:"tp",md:"$",pk:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Throwable"},{pk:".",nm:"Nothing"}]},{mt:"tp",md:"$",pk:"$",nm:"Throwable"},{mt:"tp",md:"$",pk:"$",nm:"Empty"}],nm:"Tuple"}],nm:"Callable"},def:1,mt:"prm",nm:"onRejected"}]],mt:"m",tp:[{nm:"Result"}],nm:"map"},check$5is4p7:{$t:{md:"$",pk:"$",nm:"Anything"},$ff:1,mt:"m",nm:"check"}},tp:[{dv:"out",nm:"Element"},{dv:"out",sts:[{nm:"Element"}],nm:"First"},{sts:[{md:"$",pk:"$",tp:[{mt:"tp",nm:"Element"}],nm:"Sequential"}],nm:"Rest"}],an:{by:["Julien Viet"],doc:["Combines two [[promises|Promise]] into a new promise.\n\nThe new promise is\n\n- fulfilled when both promises are fulfilled, or\n- rejected when either of the two promises is rejected."]},nm:"Conjunction"}},"$mod-deps":["ceylon.language\/1.2.0"],"$mod-bin":"8.0","ceylon.promise.internal":{runtimeContext:{super:{md:"$",pk:"$",nm:"Basic"},pa:65,sts:[{pk:"ceylon.promise",nm:"ExecutionContext"}],mt:"o",$m:{run:{$t:{md:"$",pk:"$",nm:"Anything"},pa:67,ps:[[{$t:{md:"$",pk:"$",nm:"Anything"},mt:"prm",$pt:"f",nm:"task"}]],$ff:1,mt:"m",nm:"run"},childContext:{$t:{pk:"ceylon.promise",nm:"ExecutionContext"},pa:67,mt:"m",nm:"childContext"}},nm:"runtimeContext"},AtomicRef:{super:{md:"$",pk:"$",nm:"Basic"},pa:65,ps:[{$t:{nm:"Value"},mt:"prm",nm:"val"}],mt:"c",$at:{val$rz6byn:{$t:{nm:"Value"},mt:"a",nm:"val"}},$m:{set:{$t:{md:"$",pk:"$",nm:"Anything"},pa:65,ps:[[{$t:{nm:"Value"},mt:"prm",nm:"val"}]],$ff:1,mt:"m",nm:"set"},compareAndSet:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:65,ps:[[{$t:{nm:"Value"},mt:"prm",nm:"expect"},{$t:{nm:"Value"},mt:"prm",nm:"update"}]],mt:"m",nm:"compareAndSet"},get:{$t:{nm:"Value"},pa:65,mt:"m",nm:"get"}},tp:[{nm:"Value"}],nm:"AtomicRef"}},"$mod-anns":{license:["Apache Software License"],by:["Julien Viet"],doc:["Support for promises. If an operation cannot return a value \nimmediately without blocking, it may instead return a \n_promise_ of the value. A promise is an object that \nrepresents the return value or the thrown exception that \nthe operation eventually produces. Such an operation is\nsometimes called a _long-running operation_.\n\nThis module provides following abstractions:\n\n- The [[Completable]] interface abstracts objects which\n  promise one or more values, accommodating the possibility\n  of failure.\n- The [[Completion]] interface abstracts `Completable`s that may\n  be combined to form a compound promise that produces \n  multiple values.\n- The [[Promise]] class, a `Completable` that produces a \n  single value, or fails.\n- The [[Deferred]] class, providing support for operations\n  which return instances of the `Promise` interface.\n- The [[ExecutionContext]] class abstracts the concurrency of the runtime\n  running the promises. The JVM runtime uses a threadpool, \n  the JavaScript runtime uses the `setTimeout` function. The\n  [[defineGlobalExecutionContext]] can be use to change the default context\n\n## Promises\n\nA [[Promise]] exists in one of three states:\n\n- In the _promised_ state, the operation has not yet \n  terminated.\n- In the _fulfilled_ state, the operation has produced\n  a value.\n- In the _rejected_ state, the operation has terminated \n  without producing a value. This situation is represented\n  as an [[exception|Throwable]].\n\nThe method [[Promise.completed]] allows interested \nparties to be notified when the promise makes a \ntransition from the _promised_ state to the _fulfilled_ or \nthe _rejected_ state:\n\n    Promise<Document> promise = queryDocumentById(id);\n    promise.onComplete {\n        (d) => print(\"Got the document: \" + d.title);\n        (e) => print(\"Document was not received: \" + e.message);\n    };\n\nThe first function is called the `onFulfilled` callback and \nthe second function is called the `onRejected` callback. \nThe `onRejected` function is always optional. \n\n## Returning promises\n\nA [[Deferred]] object is a factory that provides an \ninstance of the `Promise` class and manages its lifecycle,\nproviding operations to force its transition to a \n_fulfilled_ or _rejected_ state.\n\nThe instance of `Deferred` should remain private to the \nlong-running operation, only the `Promise` should be\nexposed to the caller.\n\nThe `Promise` of a deferred can be retrieved from its \n[[promise|Deferred.promise]] field:\n\n    value deferred = Deferred<String>();\n    return deferred.promise;\n\nThe `Deferred` object implements the [[Completable]] interface \nwhich provides two methods for controlling the state of the \npromise:\n\n- [[fulfill()|Completable.fulfill]] fulfills the promise with \n  a _value_, and\n- [[reject()|Completable.reject]] rejects the promise with a\n  _reason_ of type [[Throwable]].\n\nFor example:\n\n    value deferred = Deferred<String>();\n    void doOperation() {\n        try {\n            String val = getValue();\n            deferred.fulfill(val);\n        }\n        catch (Throwable e) {\n            deferred.reject(e);\n        }\n    }\n\n## Chaining promises\n\nWhen composition is needed the method [[Completion.map]]\nshould be used instead of the [[Completion.completed]]\nmethod. \n\nWhen invoking the [[Completion.map]] method the \n`onFulfilled` and `onRejected` callbacks can return a value. \nThe `compose()` method returns a new promise that will be \nfulfilled with the value of the callback. This promise will \nbe rejected if the callback invocation fails.\n\nFor example:\n\n    Promise<Integer> promiseOfInteger = promiseOfInteger();\n    Promise<String> promiseOfString = promiseOfInteger.compose((i) => i.string);\n    promiseOfString.compose((s) => print(\"Completed with \" + s));\n\nOr, more concisely:\n\n    promiseOfInteger()\n        .compose((i) => i.string)\n        .compose((s) => print(\"Completed with \" + s));\n\n## Composing promises\n\nPromises can be composed into a single promise that is \nfulfilled when every one of the individual composed \npromises is fulfilled. If one of the promise is rejected \nthen the composed promise is rejected.\n\n    Promise<String> promiseOfInteger = promiseOfString();\n    Promise<Integer> promiseOfString = promiseOfInteger();\n    (promiseOfInteger.and(promiseOfString)).completed {\n        (i, s) => print(\"All fulfilled\");\n        (e) => print(\"One failed\");\n    };\n\nNotice that:\n\n- The order of the parameters in the callback is in reverse \n  order in which the corresponding promises are chained.\n- The return type of combined promise is not [[Promise]] \n  but [[Completable]].\n\n## The `onComplete()` method\n\nThe [[onComplete()|Promise.onComplete]] method of a promise \nallows a single callback to be notified when the promise is \nfulfilled or rejected.\n\n    Promise<Document> promise = queryDocumentById(id);\n    promise.onComplete {\n        void (Document|Throwable result) {\n            switch (result)\n            case (is Document) { print(\"Fulfilled\"); }\n            case (is Throwable) { print(\"Rejected\"); }\n        };\n     };\n\n[[Promise.onComplete]] is most useful for implementing a finally clause \nin a chain of promises.\n\n## Feeding with a promise\n\n[[Deferred]] can be transitioned with a promise instead of a \nvalue:\n\n    Deferred<String> deferred1 = getDeferred1();\n    Deferred<String> deferred2 = getDeferred2();\n    deferred1.fulfill(deferred2);\n\nSimilarly the callback may return a promise instead of a \nvalue:\n\n    Deferred<String> deferred = Deferred<String>();\n    promise.compose((s) => deferred.promise);\n\n## Thread safety\n\nThe implementation is thread safe and uses a non blocking \nalgorithm for maintaining the state of a `Deferred` object.\n\n## Relationship to the A+ specification\n\nThis module is loosely based upon the A+ specification,\nwith the following differences:\n\n- The `then()` method is split between [[Completion.map]] that returns an object and [[Completion.flatMap]] that can return a Promise\n- The _Promise Resolution Procedure_ is implemented for \n  objects or promises but not for _thenables_ since that \n  would require a language with dynamic typing."]},"$mod-name":"ceylon.promise"};
});
}(typeof define==='function' && define.amd ? define : function (factory) {
if (typeof exports!=='undefined') { factory(require, exports, module);
} else { throw 'no module loader'; }
}));
