'\" -*- coding: us-ascii -*-
.if \n(.g .ds T< \\FC
.if \n(.g .ds T> \\F[\n[.fam]]
.de URL
\\$2 \(la\\$1\(ra\\$3
..
.if \n(.g .mso www.tmac
.TH "ceylon war" 1 "15 September 2016" "" ""
.SH NAME
ceylon war \- Generates a WAR file from a compiled `.car` file
.SH SYNOPSIS
'nh
.fi
.ad l
\fBceylon war\fR \kx
.if (\nx>(\n(.l/2)) .nr x (\n(.l/5)
'in \n(.iu+\nxu
[--cacherep=\fIurl\fR] [--cwd=\fIdir\fR] [--exclude-module=\fImoduleOrFile\fR...] [--jdk-provider=\fImodule\fR] [--link-with-current-distribution] [--maven-overrides=\fIfile\fR] [--name=\fIname\fR] [--no-default-repositories] [--offline] [--out=\fIdir\fR] [--overrides=\fIfile\fR] [--provided-module=\fImoduleOrFile\fR...] [--rep=\fIurl\fR...] [--resource-root=\fIdirectory\fR] [--static-metamodel] [--sysrep=\fIurl\fR] [--timeout=\fIseconds\fR] [--verbose[=\fIflags\fR]] [--] {module-with-version}
'in \n(.iu-\nxu
.ad b
'hy
.SH DESCRIPTION
Generates a WAR file from the \*(T<.car\*(T> file of the given \*(T<module\-with\-version\*(T>, suitable for deploying to a standard Servlet container.
.PP
The version number is required since, in general, there can be multiple versions available in the configured repositories.
.PP
The given module's \*(T<.car\*(T> file and those of its transitive dependencies will be copied to the \*(T<WEB\-INF/lib\*(T> of the generated WAR file. Dependencies which are provided by the application container (and thus not required to be in \*(T<WEB\-INF/lib\*(T>) can be excluded using \*(T<\-\-provided\-module\*(T>.
.SH OPTIONS
.TP 
--cacherep=\fIurl\fR
Specifies the folder to use for caching downloaded modules. (default: \*(T<~/.ceylon/cache\*(T>)
.TP 
--cwd=\fIdir\fR
Specifies the current working directory for this tool. (default: the directory where the tool is run from)
.TP 
--exclude-module=\fImoduleOrFile\fR, -x \fImoduleOrFile\fR
Excludes modules from the WAR file. Can be a module name or a file containing module names. Can be specified multiple times. Note that this excludes the module from the WAR file, but if your modules require that module to be present at runtime it will still be required and may cause your application to fail to start if it is not provided at runtime.
.TP 
--jdk-provider=\fImodule\fR
Alternate JDK provider module (defaults to the current running JDK).
.TP 
--link-with-current-distribution
Downgrade which were compiled with a more recent version of the distribution to the version of that module present in this distribution (1.3.0). This might fail with a linker error at runtime. For example if the module depended on an API present in the more recent version, but absent from 1.3.0. Allowed arguments are upgrade, downgrade or abort. Default: upgrade
.TP 
--maven-overrides=\fIfile\fR
Specifies the XML file to use to load Maven artifact overrides. See http://ceylon-lang.org/documentation/current/reference/repository/maven/ for information. Deprecated: use --overrides.
.TP 
--name=\fIname\fR, -n \fIname\fR
Sets name of the WAR file (default: moduleName-version.war)
.TP 
--no-default-repositories
Indicates that the default repositories should not be used.
.TP 
--offline, -L
Enables offline mode that will prevent connections to remote repositories.
.TP 
--out=\fIdir\fR, -o \fIdir\fR
Sets the output directory for the WAR file (default: .)
.TP 
--overrides=\fIfile\fR
Specifies the XML file to use to load module overrides. See http://ceylon-lang.org/documentation/current/reference/repository/maven/ for information. \fIExperimental\fR.
.TP 
--provided-module=\fImoduleOrFile\fR, -p \fImoduleOrFile\fR
Excludes modules from the WAR file by treating them as provided. Can be a module name or a file containing module names. Can be specified multiple times. Note that this excludes the module from the WAR file, but if your modules require that module to be present at runtime it will still be required and may cause your application to fail to start if it is not provided at runtime. The only difference between this and \*(T<\-\-exclude\-module\*(T> is that provided modules are listed in the metamodel.
.TP 
--rep=\fIurl\fR
Specifies a module repository containing dependencies. Can be specified multiple times. (default: \*(T<modules\*(T>, \*(T<~/.ceylon/repo\*(T>, \*(T<https://modules.ceylon\-lang.org/repo/1\*(T>)
.TP 
--resource-root=\fIdirectory\fR, -R \fIdirectory\fR
Sets the special resource directory whose files will end up in the root of the resulting WAR file (default: web-content).
.TP 
--static-metamodel
Generate a static metamodel, skip the WarInitializer (default: false).
.TP 
--sysrep=\fIurl\fR
Specifies the system repository containing essential modules. (default: \*(T<$CEYLON_HOME/repo\*(T>)
.TP 
--timeout=\fIseconds\fR, -T \fIseconds\fR
Sets the timeout for connections to remote repositories, use 0 for no timeout (default: 20).
.TP 
--verbose[=\fIflags\fR], -d
Produce verbose output. If no \*(T<flags\*(T> are given then be verbose about everything, otherwise just be verbose about the flags which are present. Allowed flags include: \*(T<all\*(T>, \*(T<loader\*(T>.
.SH "STATIC METAMODEL OR WARINITIALIZER "
Ceylon can set up the run-time metamodel using either a listener (ceylon.war.WarInitializer) that is set in the default web.xml. Or by generating a static metamodel file.
.SH "STATIC METAMODEL "
If you want to run on WildFly or other application servers that remove provided jars from the \*(T<lib/\*(T> folder, you should try the \*(T<\-\-static\-metamodel\*(T> argument and marking your provided modules with \*(T<\-\-provided\-module\*(T>.
.SH "WARINITIALIZER "
On non-WildFly application servers you should leave \*(T<ceylon war\*(T> do the default of generating a \*(T<web.xml\*(T> file for you which will call the \*(T<WarInitializer\*(T> listener to set up the metamodel based on the contents of the \*(T<lib/\*(T> folder at run-time.
.PP
If you provide a custom \*(T<WEB\-INF/web.xml\*(T> file in your WAR resource-root, you'll need to include the listener (ceylon.war.WarInitializer) that is set in the default web.xml. Without that listener, the metamodel will not be properly initialized.
.SH REPOSITORIES
Repositories like those specified with the \*(T<\-\-rep\*(T> or \*(T<\-\-out\*(T> options can be file paths, HTTP urls to remote servers or can be names of repositories when prepended with a \*(T<+\*(T> symbol. These names refer to repositories defined in the configuration file or can be any of the following predefined names \*(T<+SYSTEM\*(T>, \*(T<+CACHE\*(T>, \*(T<+LOCAL\*(T>, \*(T<+USER\*(T>, \*(T<+REMOTE\*(T> or \*(T<+MAVEN\*(T>. For more information see http://ceylon-lang.org/documentation/1.2/reference/repository/tools
